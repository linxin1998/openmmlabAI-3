2023-02-13 11:28:24,356 - mmseg - INFO - Multi-processing start method is `None`
2023-02-13 11:28:24,365 - mmseg - INFO - OpenCV num_threads is `20
2023-02-13 11:28:24,495 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Oct 18 2022, 18:57:03) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: GeForce RTX 3090
CUDA_HOME: /usr/local/cuda-11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.2+cu111
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.30.0+
------------------------------------------------------------

2023-02-13 11:28:24,495 - mmseg - INFO - Distributed training: False
2023-02-13 11:28:24,851 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet101_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(1, 12, 24, 36),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalVOCDataset'
data_root = '/media/ders/mazhiming/datasets/VOC2012/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=1,
    train=dict(
        type='PascalVOCDataset',
        data_root='/media/ders/mazhiming/datasets/VOC2012/',
        img_dir='JPEGImages',
        ann_dir='pseudo_seg_labels',
        split='ImageSets/Segmentation/aug.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='PascalVOCDataset',
        data_root='/media/ders/mazhiming/datasets/VOC2012/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassAug',
        split='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='PascalVOCDataset',
        data_root='/media/ders/mazhiming/datasets/VOC2012/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassAug',
        split='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=15000)
checkpoint_config = dict(by_epoch=False, interval=3000)
evaluation = dict(interval=3000, metric='mIoU', pre_eval=True)
gpu_ids = [1]
auto_resume = False
work_dir = 'lxseg/baseline'

2023-02-13 11:28:24,851 - mmseg - INFO - Set random seed to 1503404569, deterministic: False
2023-02-13 11:28:26,930 - mmseg - INFO - initialize ResNetV1c with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
2023-02-13 11:28:27,293 - mmseg - INFO - initialize DepthwiseSeparableASPPHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-02-13 11:28:27,504 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

decode_head.conv_seg.weight - torch.Size([21, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.image_pool.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.conv.weight - torch.Size([2048, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.bn.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.bn.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.conv.weight - torch.Size([2048, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.bn.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.bn.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.conv.weight - torch.Size([2048, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.bn.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.bn.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 2560, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.c1_bottleneck.conv.weight - torch.Size([48, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.c1_bottleneck.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.c1_bottleneck.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.conv.weight - torch.Size([560, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.bn.weight - torch.Size([560]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.bn.bias - torch.Size([560]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.conv.weight - torch.Size([512, 560, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.conv.weight - torch.Size([512, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([21, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023-02-13 11:28:27,542 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
  (decode_head): DepthwiseSeparableASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(512, 21, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): DepthwiseSeparableASPPModule(
      (0): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False)
          (bn): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False)
          (bn): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=2048, bias=False)
          (bn): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(2560, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (c1_bottleneck): ConvModule(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): _BatchNormXd(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (sep_bottleneck): Sequential(
      (0): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(560, 560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=560, bias=False)
          (bn): _BatchNormXd(560, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(560, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 21, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-02-13 11:28:27,584 - mmseg - INFO - Loaded 10582 images
2023-02-13 11:28:41,835 - mmseg - INFO - Loaded 1449 images
2023-02-13 11:28:41,836 - mmseg - INFO - Start running, host: ders@ders-SYS-4029GP-TRTC-ZY001, work_dir: /media/ders/linxin/mmsegmentation-master/lxseg/baseline
2023-02-13 11:28:41,837 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-13 11:28:41,837 - mmseg - INFO - workflow: [('train', 1)], max: 15000 iters
2023-02-13 11:28:41,837 - mmseg - INFO - Checkpoints will be saved to /media/ders/linxin/mmsegmentation-master/lxseg/baseline by HardDiskBackend.
2023-02-13 11:29:27,323 - mmseg - INFO - Iter [50/15000]	lr: 9.971e-03, eta: 3:45:58, time: 0.907, data_time: 0.020, memory: 21690, decode.loss_ce: 1.7499, decode.acc_seg: 56.7648, aux.loss_ce: 0.6857, aux.acc_seg: 56.1194, loss: 2.4356
2023-02-13 11:30:10,618 - mmseg - INFO - Iter [100/15000]	lr: 9.941e-03, eta: 3:40:07, time: 0.866, data_time: 0.010, memory: 21690, decode.loss_ce: 1.4148, decode.acc_seg: 60.0996, aux.loss_ce: 0.5609, aux.acc_seg: 60.9580, loss: 1.9757
2023-02-13 11:30:55,808 - mmseg - INFO - Iter [150/15000]	lr: 9.911e-03, eta: 3:40:49, time: 0.904, data_time: 0.015, memory: 21690, decode.loss_ce: 1.2131, decode.acc_seg: 64.5334, aux.loss_ce: 0.5018, aux.acc_seg: 64.6022, loss: 1.7149
2023-02-13 11:31:41,591 - mmseg - INFO - Iter [200/15000]	lr: 9.882e-03, eta: 3:41:31, time: 0.916, data_time: 0.012, memory: 21690, decode.loss_ce: 1.2236, decode.acc_seg: 63.0269, aux.loss_ce: 0.5387, aux.acc_seg: 61.8754, loss: 1.7623
2023-02-13 11:32:27,469 - mmseg - INFO - Iter [250/15000]	lr: 9.852e-03, eta: 3:41:43, time: 0.918, data_time: 0.010, memory: 21690, decode.loss_ce: 1.0456, decode.acc_seg: 68.4698, aux.loss_ce: 0.4689, aux.acc_seg: 66.1334, loss: 1.5145
2023-02-13 11:33:13,773 - mmseg - INFO - Iter [300/15000]	lr: 9.822e-03, eta: 3:41:57, time: 0.926, data_time: 0.009, memory: 21690, decode.loss_ce: 1.0132, decode.acc_seg: 68.9642, aux.loss_ce: 0.4698, aux.acc_seg: 66.7173, loss: 1.4830
2023-02-13 11:34:01,279 - mmseg - INFO - Iter [350/15000]	lr: 9.792e-03, eta: 3:42:44, time: 0.950, data_time: 0.017, memory: 21690, decode.loss_ce: 1.0360, decode.acc_seg: 68.9497, aux.loss_ce: 0.4832, aux.acc_seg: 65.1869, loss: 1.5191
2023-02-13 11:34:49,101 - mmseg - INFO - Iter [400/15000]	lr: 9.763e-03, eta: 3:43:19, time: 0.956, data_time: 0.018, memory: 21690, decode.loss_ce: 0.9570, decode.acc_seg: 70.1511, aux.loss_ce: 0.4506, aux.acc_seg: 67.2108, loss: 1.4076
2023-02-13 11:35:36,750 - mmseg - INFO - Iter [450/15000]	lr: 9.733e-03, eta: 3:43:30, time: 0.953, data_time: 0.010, memory: 21690, decode.loss_ce: 1.0281, decode.acc_seg: 68.4735, aux.loss_ce: 0.4707, aux.acc_seg: 65.5903, loss: 1.4989
2023-02-13 11:36:23,509 - mmseg - INFO - Iter [500/15000]	lr: 9.703e-03, eta: 3:43:04, time: 0.935, data_time: 0.008, memory: 21690, decode.loss_ce: 0.8947, decode.acc_seg: 71.1127, aux.loss_ce: 0.4282, aux.acc_seg: 68.0857, loss: 1.3229
2023-02-13 11:37:10,513 - mmseg - INFO - Iter [550/15000]	lr: 9.673e-03, eta: 3:42:40, time: 0.940, data_time: 0.013, memory: 21690, decode.loss_ce: 0.8594, decode.acc_seg: 73.5936, aux.loss_ce: 0.4418, aux.acc_seg: 67.7933, loss: 1.3012
2023-02-13 11:37:58,265 - mmseg - INFO - Iter [600/15000]	lr: 9.643e-03, eta: 3:42:30, time: 0.955, data_time: 0.016, memory: 21690, decode.loss_ce: 0.8618, decode.acc_seg: 72.6242, aux.loss_ce: 0.4292, aux.acc_seg: 68.6138, loss: 1.2910
2023-02-13 11:38:45,587 - mmseg - INFO - Iter [650/15000]	lr: 9.614e-03, eta: 3:42:05, time: 0.946, data_time: 0.012, memory: 21690, decode.loss_ce: 0.8175, decode.acc_seg: 73.5475, aux.loss_ce: 0.4187, aux.acc_seg: 68.7682, loss: 1.2362
2023-02-13 11:39:32,372 - mmseg - INFO - Iter [700/15000]	lr: 9.584e-03, eta: 3:41:26, time: 0.936, data_time: 0.009, memory: 21690, decode.loss_ce: 0.7951, decode.acc_seg: 73.8045, aux.loss_ce: 0.4050, aux.acc_seg: 69.9984, loss: 1.2001
2023-02-13 11:40:19,184 - mmseg - INFO - Iter [750/15000]	lr: 9.554e-03, eta: 3:40:46, time: 0.936, data_time: 0.010, memory: 21690, decode.loss_ce: 0.9726, decode.acc_seg: 70.4120, aux.loss_ce: 0.4559, aux.acc_seg: 66.7661, loss: 1.4284
2023-02-13 11:41:07,598 - mmseg - INFO - Iter [800/15000]	lr: 9.524e-03, eta: 3:40:34, time: 0.968, data_time: 0.018, memory: 21690, decode.loss_ce: 0.8396, decode.acc_seg: 73.8945, aux.loss_ce: 0.4270, aux.acc_seg: 69.2077, loss: 1.2666
2023-02-13 11:41:55,222 - mmseg - INFO - Iter [850/15000]	lr: 9.494e-03, eta: 3:40:05, time: 0.952, data_time: 0.015, memory: 21690, decode.loss_ce: 0.8444, decode.acc_seg: 73.3724, aux.loss_ce: 0.4363, aux.acc_seg: 67.8630, loss: 1.2807
2023-02-13 11:42:43,287 - mmseg - INFO - Iter [900/15000]	lr: 9.464e-03, eta: 3:39:40, time: 0.961, data_time: 0.010, memory: 21690, decode.loss_ce: 0.7936, decode.acc_seg: 74.5068, aux.loss_ce: 0.4086, aux.acc_seg: 69.6813, loss: 1.2022
2023-02-13 11:43:30,886 - mmseg - INFO - Iter [950/15000]	lr: 9.434e-03, eta: 3:39:06, time: 0.952, data_time: 0.009, memory: 21690, decode.loss_ce: 0.8232, decode.acc_seg: 73.5611, aux.loss_ce: 0.4178, aux.acc_seg: 68.5442, loss: 1.2410
2023-02-13 11:44:18,497 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 11:44:18,497 - mmseg - INFO - Iter [1000/15000]	lr: 9.405e-03, eta: 3:38:31, time: 0.952, data_time: 0.012, memory: 21690, decode.loss_ce: 0.7917, decode.acc_seg: 74.1635, aux.loss_ce: 0.3976, aux.acc_seg: 70.2590, loss: 1.1893
2023-02-13 11:45:06,966 - mmseg - INFO - Iter [1050/15000]	lr: 9.375e-03, eta: 3:38:06, time: 0.969, data_time: 0.017, memory: 21690, decode.loss_ce: 0.7902, decode.acc_seg: 74.2345, aux.loss_ce: 0.3920, aux.acc_seg: 70.6418, loss: 1.1822
2023-02-13 11:45:56,023 - mmseg - INFO - Iter [1100/15000]	lr: 9.345e-03, eta: 3:37:46, time: 0.981, data_time: 0.020, memory: 21690, decode.loss_ce: 0.7546, decode.acc_seg: 75.6789, aux.loss_ce: 0.3880, aux.acc_seg: 70.3239, loss: 1.1426
2023-02-13 11:46:44,617 - mmseg - INFO - Iter [1150/15000]	lr: 9.315e-03, eta: 3:37:18, time: 0.972, data_time: 0.020, memory: 21690, decode.loss_ce: 0.7149, decode.acc_seg: 76.9326, aux.loss_ce: 0.3832, aux.acc_seg: 71.2340, loss: 1.0981
2023-02-13 11:47:31,264 - mmseg - INFO - Iter [1200/15000]	lr: 9.285e-03, eta: 3:36:26, time: 0.933, data_time: 0.010, memory: 21690, decode.loss_ce: 0.8384, decode.acc_seg: 73.4738, aux.loss_ce: 0.4119, aux.acc_seg: 69.5062, loss: 1.2503
2023-02-13 11:48:19,081 - mmseg - INFO - Iter [1250/15000]	lr: 9.255e-03, eta: 3:35:47, time: 0.956, data_time: 0.009, memory: 21690, decode.loss_ce: 0.6658, decode.acc_seg: 77.6559, aux.loss_ce: 0.3652, aux.acc_seg: 71.8898, loss: 1.0309
2023-02-13 11:49:05,771 - mmseg - INFO - Iter [1300/15000]	lr: 9.225e-03, eta: 3:34:56, time: 0.934, data_time: 0.008, memory: 21690, decode.loss_ce: 0.7205, decode.acc_seg: 76.2119, aux.loss_ce: 0.3785, aux.acc_seg: 71.3735, loss: 1.0989
2023-02-13 11:49:57,564 - mmseg - INFO - Iter [1350/15000]	lr: 9.195e-03, eta: 3:34:57, time: 1.036, data_time: 0.060, memory: 21690, decode.loss_ce: 0.6957, decode.acc_seg: 75.8383, aux.loss_ce: 0.3867, aux.acc_seg: 69.5546, loss: 1.0824
2023-02-13 11:50:46,667 - mmseg - INFO - Iter [1400/15000]	lr: 9.165e-03, eta: 3:34:28, time: 0.982, data_time: 0.009, memory: 21690, decode.loss_ce: 0.7835, decode.acc_seg: 74.2286, aux.loss_ce: 0.3921, aux.acc_seg: 69.8459, loss: 1.1757
2023-02-13 11:51:34,608 - mmseg - INFO - Iter [1450/15000]	lr: 9.135e-03, eta: 3:33:46, time: 0.959, data_time: 0.009, memory: 21690, decode.loss_ce: 0.7389, decode.acc_seg: 75.7531, aux.loss_ce: 0.3908, aux.acc_seg: 70.0529, loss: 1.1297
2023-02-13 11:52:23,963 - mmseg - INFO - Iter [1500/15000]	lr: 9.105e-03, eta: 3:33:17, time: 0.987, data_time: 0.009, memory: 21690, decode.loss_ce: 0.6803, decode.acc_seg: 77.8535, aux.loss_ce: 0.3692, aux.acc_seg: 71.8142, loss: 1.0495
2023-02-13 11:53:12,531 - mmseg - INFO - Iter [1550/15000]	lr: 9.075e-03, eta: 3:32:40, time: 0.971, data_time: 0.012, memory: 21690, decode.loss_ce: 0.6693, decode.acc_seg: 77.6185, aux.loss_ce: 0.3703, aux.acc_seg: 71.3606, loss: 1.0397
2023-02-13 11:53:59,866 - mmseg - INFO - Iter [1600/15000]	lr: 9.045e-03, eta: 3:31:52, time: 0.947, data_time: 0.010, memory: 21690, decode.loss_ce: 0.6802, decode.acc_seg: 77.2806, aux.loss_ce: 0.3612, aux.acc_seg: 71.7377, loss: 1.0414
2023-02-13 11:54:46,965 - mmseg - INFO - Iter [1650/15000]	lr: 9.015e-03, eta: 3:31:02, time: 0.942, data_time: 0.009, memory: 21690, decode.loss_ce: 0.7506, decode.acc_seg: 74.3947, aux.loss_ce: 0.3980, aux.acc_seg: 68.9260, loss: 1.1486
2023-02-13 11:55:36,916 - mmseg - INFO - Iter [1700/15000]	lr: 8.985e-03, eta: 3:30:34, time: 0.999, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6552, decode.acc_seg: 78.9585, aux.loss_ce: 0.3647, aux.acc_seg: 71.9207, loss: 1.0198
2023-02-13 11:56:25,639 - mmseg - INFO - Iter [1750/15000]	lr: 8.955e-03, eta: 3:29:56, time: 0.974, data_time: 0.011, memory: 21690, decode.loss_ce: 0.6890, decode.acc_seg: 76.7050, aux.loss_ce: 0.3739, aux.acc_seg: 70.6312, loss: 1.0629
2023-02-13 11:57:14,137 - mmseg - INFO - Iter [1800/15000]	lr: 8.925e-03, eta: 3:29:15, time: 0.970, data_time: 0.011, memory: 21690, decode.loss_ce: 0.7038, decode.acc_seg: 76.8204, aux.loss_ce: 0.3712, aux.acc_seg: 70.8573, loss: 1.0750
2023-02-13 11:58:01,598 - mmseg - INFO - Iter [1850/15000]	lr: 8.895e-03, eta: 3:28:27, time: 0.949, data_time: 0.009, memory: 21690, decode.loss_ce: 0.6963, decode.acc_seg: 76.7888, aux.loss_ce: 0.3752, aux.acc_seg: 71.2437, loss: 1.0715
2023-02-13 11:58:50,672 - mmseg - INFO - Iter [1900/15000]	lr: 8.864e-03, eta: 3:27:50, time: 0.981, data_time: 0.010, memory: 21690, decode.loss_ce: 0.5961, decode.acc_seg: 80.6563, aux.loss_ce: 0.3286, aux.acc_seg: 74.7583, loss: 0.9246
2023-02-13 11:59:39,104 - mmseg - INFO - Iter [1950/15000]	lr: 8.834e-03, eta: 3:27:08, time: 0.969, data_time: 0.011, memory: 21690, decode.loss_ce: 0.6590, decode.acc_seg: 78.9230, aux.loss_ce: 0.3693, aux.acc_seg: 71.5156, loss: 1.0282
2023-02-13 12:00:27,345 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 12:00:27,346 - mmseg - INFO - Iter [2000/15000]	lr: 8.804e-03, eta: 3:26:24, time: 0.965, data_time: 0.010, memory: 21690, decode.loss_ce: 0.6575, decode.acc_seg: 78.8308, aux.loss_ce: 0.3521, aux.acc_seg: 73.0708, loss: 1.0095
2023-02-13 12:01:18,238 - mmseg - INFO - Iter [2050/15000]	lr: 8.774e-03, eta: 3:25:57, time: 1.018, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5997, decode.acc_seg: 79.4520, aux.loss_ce: 0.3486, aux.acc_seg: 71.5002, loss: 0.9482
2023-02-13 12:02:05,760 - mmseg - INFO - Iter [2100/15000]	lr: 8.744e-03, eta: 3:25:08, time: 0.950, data_time: 0.009, memory: 21690, decode.loss_ce: 0.6248, decode.acc_seg: 78.8155, aux.loss_ce: 0.3429, aux.acc_seg: 73.2197, loss: 0.9677
2023-02-13 12:02:55,772 - mmseg - INFO - Iter [2150/15000]	lr: 8.714e-03, eta: 3:24:34, time: 1.000, data_time: 0.011, memory: 21690, decode.loss_ce: 0.6326, decode.acc_seg: 79.2027, aux.loss_ce: 0.3372, aux.acc_seg: 73.9603, loss: 0.9698
2023-02-13 12:03:44,407 - mmseg - INFO - Iter [2200/15000]	lr: 8.684e-03, eta: 3:23:52, time: 0.973, data_time: 0.011, memory: 21690, decode.loss_ce: 0.6669, decode.acc_seg: 78.2023, aux.loss_ce: 0.3581, aux.acc_seg: 72.7918, loss: 1.0251
2023-02-13 12:04:32,844 - mmseg - INFO - Iter [2250/15000]	lr: 8.653e-03, eta: 3:23:08, time: 0.969, data_time: 0.010, memory: 21690, decode.loss_ce: 0.6871, decode.acc_seg: 76.9581, aux.loss_ce: 0.3626, aux.acc_seg: 71.8386, loss: 1.0497
2023-02-13 12:05:20,209 - mmseg - INFO - Iter [2300/15000]	lr: 8.623e-03, eta: 3:22:17, time: 0.947, data_time: 0.009, memory: 21690, decode.loss_ce: 0.6472, decode.acc_seg: 79.0285, aux.loss_ce: 0.3529, aux.acc_seg: 73.1624, loss: 1.0001
2023-02-13 12:06:07,513 - mmseg - INFO - Iter [2350/15000]	lr: 8.593e-03, eta: 3:21:27, time: 0.946, data_time: 0.011, memory: 21690, decode.loss_ce: 0.6801, decode.acc_seg: 77.7792, aux.loss_ce: 0.3587, aux.acc_seg: 72.4431, loss: 1.0387
2023-02-13 12:06:54,426 - mmseg - INFO - Iter [2400/15000]	lr: 8.563e-03, eta: 3:20:35, time: 0.938, data_time: 0.010, memory: 21690, decode.loss_ce: 0.6461, decode.acc_seg: 79.0521, aux.loss_ce: 0.3525, aux.acc_seg: 72.7865, loss: 0.9986
2023-02-13 12:07:41,878 - mmseg - INFO - Iter [2450/15000]	lr: 8.533e-03, eta: 3:19:45, time: 0.949, data_time: 0.009, memory: 21690, decode.loss_ce: 0.6324, decode.acc_seg: 79.3250, aux.loss_ce: 0.3443, aux.acc_seg: 73.2048, loss: 0.9767
2023-02-13 12:08:29,793 - mmseg - INFO - Iter [2500/15000]	lr: 8.502e-03, eta: 3:18:58, time: 0.958, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5620, decode.acc_seg: 80.8906, aux.loss_ce: 0.3155, aux.acc_seg: 74.4965, loss: 0.8775
2023-02-13 12:09:17,270 - mmseg - INFO - Iter [2550/15000]	lr: 8.472e-03, eta: 3:18:09, time: 0.949, data_time: 0.011, memory: 21690, decode.loss_ce: 0.6085, decode.acc_seg: 79.8188, aux.loss_ce: 0.3353, aux.acc_seg: 73.5459, loss: 0.9438
2023-02-13 12:10:03,859 - mmseg - INFO - Iter [2600/15000]	lr: 8.442e-03, eta: 3:17:16, time: 0.932, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5919, decode.acc_seg: 80.1175, aux.loss_ce: 0.3321, aux.acc_seg: 74.2953, loss: 0.9240
2023-02-13 12:10:54,230 - mmseg - INFO - Iter [2650/15000]	lr: 8.412e-03, eta: 3:16:41, time: 1.007, data_time: 0.055, memory: 21690, decode.loss_ce: 0.5972, decode.acc_seg: 79.8612, aux.loss_ce: 0.3393, aux.acc_seg: 73.3948, loss: 0.9365
2023-02-13 12:11:42,274 - mmseg - INFO - Iter [2700/15000]	lr: 8.381e-03, eta: 3:15:54, time: 0.961, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4896, decode.acc_seg: 83.5698, aux.loss_ce: 0.3130, aux.acc_seg: 74.5701, loss: 0.8027
2023-02-13 12:12:29,682 - mmseg - INFO - Iter [2750/15000]	lr: 8.351e-03, eta: 3:15:05, time: 0.948, data_time: 0.010, memory: 21690, decode.loss_ce: 0.5841, decode.acc_seg: 80.5982, aux.loss_ce: 0.3350, aux.acc_seg: 73.8976, loss: 0.9191
2023-02-13 12:13:17,444 - mmseg - INFO - Iter [2800/15000]	lr: 8.321e-03, eta: 3:14:17, time: 0.955, data_time: 0.009, memory: 21690, decode.loss_ce: 0.6248, decode.acc_seg: 79.0275, aux.loss_ce: 0.3530, aux.acc_seg: 72.3693, loss: 0.9778
2023-02-13 12:14:05,321 - mmseg - INFO - Iter [2850/15000]	lr: 8.290e-03, eta: 3:13:29, time: 0.958, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5891, decode.acc_seg: 79.9468, aux.loss_ce: 0.3388, aux.acc_seg: 72.7963, loss: 0.9279
2023-02-13 12:14:53,563 - mmseg - INFO - Iter [2900/15000]	lr: 8.260e-03, eta: 3:12:44, time: 0.965, data_time: 0.012, memory: 21690, decode.loss_ce: 0.6603, decode.acc_seg: 77.7581, aux.loss_ce: 0.3699, aux.acc_seg: 71.2125, loss: 1.0302
2023-02-13 12:15:40,340 - mmseg - INFO - Iter [2950/15000]	lr: 8.230e-03, eta: 3:11:52, time: 0.936, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5960, decode.acc_seg: 80.3183, aux.loss_ce: 0.3313, aux.acc_seg: 74.5940, loss: 0.9274
2023-02-13 12:16:27,390 - mmseg - INFO - Saving checkpoint at 3000 iterations
2023-02-13 12:16:28,839 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 12:16:28,839 - mmseg - INFO - Iter [3000/15000]	lr: 8.199e-03, eta: 3:11:07, time: 0.970, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6156, decode.acc_seg: 79.0397, aux.loss_ce: 0.3479, aux.acc_seg: 72.7052, loss: 0.9635
2023-02-13 12:19:36,319 - mmseg - INFO - per class results:
2023-02-13 12:19:36,320 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 83.32 | 87.04 |
|  aeroplane  | 56.91 | 86.22 |
|   bicycle   |  21.7 | 68.18 |
|     bird    | 61.86 | 70.19 |
|     boat    | 48.98 | 77.39 |
|    bottle   | 39.57 | 83.97 |
|     bus     | 52.75 | 94.68 |
|     car     | 44.37 | 84.59 |
|     cat     | 62.13 | 90.14 |
|    chair    | 13.13 | 15.78 |
|     cow     |  0.83 |  0.83 |
| diningtable | 23.47 | 27.36 |
|     dog     | 51.52 | 69.86 |
|    horse    | 46.59 | 78.35 |
|  motorbike  | 47.17 |  61.2 |
|    person   | 69.09 | 87.51 |
| pottedplant | 25.24 | 37.76 |
|    sheep    | 46.68 | 80.16 |
|     sofa    | 30.85 | 40.73 |
|    train    | 45.42 | 90.35 |
|  tvmonitor  | 30.87 | 81.31 |
+-------------+-------+-------+
2023-02-13 12:19:36,320 - mmseg - INFO - Summary:
2023-02-13 12:19:36,321 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 82.91 | 42.97 | 67.31 |
+-------+-------+-------+
2023-02-13 12:19:36,321 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 12:19:36,321 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.8291, mIoU: 0.4297, mAcc: 0.6731, IoU.background: 0.8332, IoU.aeroplane: 0.5691, IoU.bicycle: 0.2170, IoU.bird: 0.6186, IoU.boat: 0.4898, IoU.bottle: 0.3957, IoU.bus: 0.5275, IoU.car: 0.4437, IoU.cat: 0.6213, IoU.chair: 0.1313, IoU.cow: 0.0083, IoU.diningtable: 0.2347, IoU.dog: 0.5152, IoU.horse: 0.4659, IoU.motorbike: 0.4717, IoU.person: 0.6909, IoU.pottedplant: 0.2524, IoU.sheep: 0.4668, IoU.sofa: 0.3085, IoU.train: 0.4542, IoU.tvmonitor: 0.3087, Acc.background: 0.8704, Acc.aeroplane: 0.8622, Acc.bicycle: 0.6818, Acc.bird: 0.7019, Acc.boat: 0.7739, Acc.bottle: 0.8397, Acc.bus: 0.9468, Acc.car: 0.8459, Acc.cat: 0.9014, Acc.chair: 0.1578, Acc.cow: 0.0083, Acc.diningtable: 0.2736, Acc.dog: 0.6986, Acc.horse: 0.7835, Acc.motorbike: 0.6120, Acc.person: 0.8751, Acc.pottedplant: 0.3776, Acc.sheep: 0.8016, Acc.sofa: 0.4073, Acc.train: 0.9035, Acc.tvmonitor: 0.8131
2023-02-13 12:20:24,053 - mmseg - INFO - Iter [3050/15000]	lr: 8.169e-03, eta: 3:22:33, time: 4.704, data_time: 3.759, memory: 21690, decode.loss_ce: 0.5645, decode.acc_seg: 80.9910, aux.loss_ce: 0.3196, aux.acc_seg: 74.3145, loss: 0.8842
2023-02-13 12:21:11,411 - mmseg - INFO - Iter [3100/15000]	lr: 8.139e-03, eta: 3:21:29, time: 0.947, data_time: 0.012, memory: 21690, decode.loss_ce: 0.5431, decode.acc_seg: 81.1006, aux.loss_ce: 0.3311, aux.acc_seg: 73.5734, loss: 0.8742
2023-02-13 12:21:59,371 - mmseg - INFO - Iter [3150/15000]	lr: 8.108e-03, eta: 3:20:28, time: 0.959, data_time: 0.010, memory: 21690, decode.loss_ce: 0.4994, decode.acc_seg: 82.9178, aux.loss_ce: 0.3031, aux.acc_seg: 76.0093, loss: 0.8025
2023-02-13 12:22:47,143 - mmseg - INFO - Iter [3200/15000]	lr: 8.078e-03, eta: 3:19:26, time: 0.955, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6162, decode.acc_seg: 80.3219, aux.loss_ce: 0.3347, aux.acc_seg: 74.6038, loss: 0.9509
2023-02-13 12:23:34,978 - mmseg - INFO - Iter [3250/15000]	lr: 8.047e-03, eta: 3:18:25, time: 0.957, data_time: 0.010, memory: 21690, decode.loss_ce: 0.5143, decode.acc_seg: 82.3103, aux.loss_ce: 0.3061, aux.acc_seg: 75.3124, loss: 0.8204
2023-02-13 12:24:22,217 - mmseg - INFO - Iter [3300/15000]	lr: 8.017e-03, eta: 3:17:22, time: 0.945, data_time: 0.013, memory: 21690, decode.loss_ce: 0.5263, decode.acc_seg: 81.0804, aux.loss_ce: 0.3094, aux.acc_seg: 74.8899, loss: 0.8357
2023-02-13 12:25:10,076 - mmseg - INFO - Iter [3350/15000]	lr: 7.986e-03, eta: 3:16:22, time: 0.957, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5619, decode.acc_seg: 81.4472, aux.loss_ce: 0.3186, aux.acc_seg: 74.8904, loss: 0.8805
2023-02-13 12:25:57,409 - mmseg - INFO - Iter [3400/15000]	lr: 7.956e-03, eta: 3:15:20, time: 0.947, data_time: 0.009, memory: 21690, decode.loss_ce: 0.6104, decode.acc_seg: 79.3788, aux.loss_ce: 0.3442, aux.acc_seg: 73.3598, loss: 0.9546
2023-02-13 12:26:45,848 - mmseg - INFO - Iter [3450/15000]	lr: 7.925e-03, eta: 3:14:23, time: 0.969, data_time: 0.010, memory: 21690, decode.loss_ce: 0.5403, decode.acc_seg: 82.1300, aux.loss_ce: 0.3050, aux.acc_seg: 76.1648, loss: 0.8454
2023-02-13 12:27:34,186 - mmseg - INFO - Iter [3500/15000]	lr: 7.895e-03, eta: 3:13:25, time: 0.967, data_time: 0.013, memory: 21690, decode.loss_ce: 0.5388, decode.acc_seg: 80.8244, aux.loss_ce: 0.3127, aux.acc_seg: 74.9935, loss: 0.8515
2023-02-13 12:28:21,177 - mmseg - INFO - Iter [3550/15000]	lr: 7.864e-03, eta: 3:12:24, time: 0.940, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5722, decode.acc_seg: 81.3030, aux.loss_ce: 0.3214, aux.acc_seg: 75.0073, loss: 0.8936
2023-02-13 12:29:08,234 - mmseg - INFO - Iter [3600/15000]	lr: 7.834e-03, eta: 3:11:23, time: 0.941, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5183, decode.acc_seg: 82.8028, aux.loss_ce: 0.3022, aux.acc_seg: 76.7011, loss: 0.8205
2023-02-13 12:29:56,285 - mmseg - INFO - Iter [3650/15000]	lr: 7.803e-03, eta: 3:10:25, time: 0.961, data_time: 0.010, memory: 21690, decode.loss_ce: 0.5599, decode.acc_seg: 81.3309, aux.loss_ce: 0.3141, aux.acc_seg: 75.3001, loss: 0.8740
2023-02-13 12:30:44,135 - mmseg - INFO - Iter [3700/15000]	lr: 7.773e-03, eta: 3:09:27, time: 0.957, data_time: 0.015, memory: 21690, decode.loss_ce: 0.5589, decode.acc_seg: 81.3762, aux.loss_ce: 0.3141, aux.acc_seg: 75.6564, loss: 0.8730
2023-02-13 12:31:33,033 - mmseg - INFO - Iter [3750/15000]	lr: 7.742e-03, eta: 3:08:33, time: 0.978, data_time: 0.010, memory: 21690, decode.loss_ce: 0.4991, decode.acc_seg: 83.3716, aux.loss_ce: 0.2915, aux.acc_seg: 77.1557, loss: 0.7907
2023-02-13 12:32:19,878 - mmseg - INFO - Iter [3800/15000]	lr: 7.712e-03, eta: 3:07:32, time: 0.937, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5886, decode.acc_seg: 80.4089, aux.loss_ce: 0.3384, aux.acc_seg: 73.5270, loss: 0.9270
2023-02-13 12:33:08,836 - mmseg - INFO - Iter [3850/15000]	lr: 7.681e-03, eta: 3:06:38, time: 0.979, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5345, decode.acc_seg: 82.5854, aux.loss_ce: 0.3033, aux.acc_seg: 76.5481, loss: 0.8379
2023-02-13 12:33:57,853 - mmseg - INFO - Iter [3900/15000]	lr: 7.651e-03, eta: 3:05:45, time: 0.980, data_time: 0.015, memory: 21690, decode.loss_ce: 0.5195, decode.acc_seg: 82.5536, aux.loss_ce: 0.3019, aux.acc_seg: 76.1073, loss: 0.8214
2023-02-13 12:34:45,990 - mmseg - INFO - Iter [3950/15000]	lr: 7.620e-03, eta: 3:04:49, time: 0.963, data_time: 0.011, memory: 21690, decode.loss_ce: 0.5213, decode.acc_seg: 82.1031, aux.loss_ce: 0.3052, aux.acc_seg: 75.2571, loss: 0.8266
2023-02-13 12:35:35,012 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 12:35:35,013 - mmseg - INFO - Iter [4000/15000]	lr: 7.589e-03, eta: 3:03:55, time: 0.980, data_time: 0.055, memory: 21690, decode.loss_ce: 0.5740, decode.acc_seg: 79.8546, aux.loss_ce: 0.3253, aux.acc_seg: 74.1103, loss: 0.8993
2023-02-13 12:36:21,843 - mmseg - INFO - Iter [4050/15000]	lr: 7.559e-03, eta: 3:02:56, time: 0.937, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4849, decode.acc_seg: 83.7289, aux.loss_ce: 0.3071, aux.acc_seg: 76.1545, loss: 0.7920
2023-02-13 12:37:10,284 - mmseg - INFO - Iter [4100/15000]	lr: 7.528e-03, eta: 3:02:01, time: 0.969, data_time: 0.017, memory: 21690, decode.loss_ce: 0.5129, decode.acc_seg: 82.3031, aux.loss_ce: 0.3089, aux.acc_seg: 75.2795, loss: 0.8218
2023-02-13 12:37:58,237 - mmseg - INFO - Iter [4150/15000]	lr: 7.497e-03, eta: 3:01:06, time: 0.959, data_time: 0.017, memory: 21690, decode.loss_ce: 0.5058, decode.acc_seg: 82.6032, aux.loss_ce: 0.3003, aux.acc_seg: 76.4026, loss: 0.8061
2023-02-13 12:38:46,126 - mmseg - INFO - Iter [4200/15000]	lr: 7.467e-03, eta: 3:00:10, time: 0.958, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5732, decode.acc_seg: 80.5816, aux.loss_ce: 0.3345, aux.acc_seg: 73.5289, loss: 0.9077
2023-02-13 12:39:33,035 - mmseg - INFO - Iter [4250/15000]	lr: 7.436e-03, eta: 2:59:12, time: 0.938, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4656, decode.acc_seg: 84.5005, aux.loss_ce: 0.2967, aux.acc_seg: 76.7782, loss: 0.7623
2023-02-13 12:40:20,173 - mmseg - INFO - Iter [4300/15000]	lr: 7.405e-03, eta: 2:58:15, time: 0.943, data_time: 0.012, memory: 21690, decode.loss_ce: 0.4716, decode.acc_seg: 83.6565, aux.loss_ce: 0.2901, aux.acc_seg: 76.6245, loss: 0.7617
2023-02-13 12:41:08,622 - mmseg - INFO - Iter [4350/15000]	lr: 7.375e-03, eta: 2:57:21, time: 0.969, data_time: 0.019, memory: 21690, decode.loss_ce: 0.4774, decode.acc_seg: 83.9470, aux.loss_ce: 0.2990, aux.acc_seg: 76.2293, loss: 0.7764
2023-02-13 12:41:55,360 - mmseg - INFO - Iter [4400/15000]	lr: 7.344e-03, eta: 2:56:23, time: 0.935, data_time: 0.010, memory: 21690, decode.loss_ce: 0.5029, decode.acc_seg: 82.8006, aux.loss_ce: 0.3174, aux.acc_seg: 74.9388, loss: 0.8203
2023-02-13 12:42:42,099 - mmseg - INFO - Iter [4450/15000]	lr: 7.313e-03, eta: 2:55:26, time: 0.935, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5241, decode.acc_seg: 82.3498, aux.loss_ce: 0.3222, aux.acc_seg: 74.7365, loss: 0.8463
2023-02-13 12:43:29,356 - mmseg - INFO - Iter [4500/15000]	lr: 7.282e-03, eta: 2:54:30, time: 0.945, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5002, decode.acc_seg: 82.3114, aux.loss_ce: 0.3070, aux.acc_seg: 75.1819, loss: 0.8073
2023-02-13 12:44:18,674 - mmseg - INFO - Iter [4550/15000]	lr: 7.251e-03, eta: 2:53:39, time: 0.986, data_time: 0.016, memory: 21690, decode.loss_ce: 0.5199, decode.acc_seg: 82.6911, aux.loss_ce: 0.3050, aux.acc_seg: 75.8415, loss: 0.8248
2023-02-13 12:45:06,909 - mmseg - INFO - Iter [4600/15000]	lr: 7.221e-03, eta: 2:52:45, time: 0.965, data_time: 0.013, memory: 21690, decode.loss_ce: 0.5274, decode.acc_seg: 82.6914, aux.loss_ce: 0.3139, aux.acc_seg: 75.6478, loss: 0.8413
2023-02-13 12:45:53,954 - mmseg - INFO - Iter [4650/15000]	lr: 7.190e-03, eta: 2:51:49, time: 0.941, data_time: 0.009, memory: 21690, decode.loss_ce: 0.5020, decode.acc_seg: 83.3606, aux.loss_ce: 0.2992, aux.acc_seg: 76.4295, loss: 0.8013
2023-02-13 12:46:40,810 - mmseg - INFO - Iter [4700/15000]	lr: 7.159e-03, eta: 2:50:53, time: 0.937, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5274, decode.acc_seg: 81.6794, aux.loss_ce: 0.3016, aux.acc_seg: 75.9311, loss: 0.8290
2023-02-13 12:47:28,363 - mmseg - INFO - Iter [4750/15000]	lr: 7.128e-03, eta: 2:49:58, time: 0.951, data_time: 0.015, memory: 21690, decode.loss_ce: 0.4700, decode.acc_seg: 83.5647, aux.loss_ce: 0.2980, aux.acc_seg: 76.0661, loss: 0.7680
2023-02-13 12:48:16,452 - mmseg - INFO - Iter [4800/15000]	lr: 7.097e-03, eta: 2:49:05, time: 0.962, data_time: 0.018, memory: 21690, decode.loss_ce: 0.4037, decode.acc_seg: 85.5221, aux.loss_ce: 0.2678, aux.acc_seg: 78.2578, loss: 0.6715
2023-02-13 12:49:04,594 - mmseg - INFO - Iter [4850/15000]	lr: 7.066e-03, eta: 2:48:12, time: 0.963, data_time: 0.010, memory: 21690, decode.loss_ce: 0.4683, decode.acc_seg: 83.4390, aux.loss_ce: 0.2878, aux.acc_seg: 76.4622, loss: 0.7561
2023-02-13 12:49:52,555 - mmseg - INFO - Iter [4900/15000]	lr: 7.036e-03, eta: 2:47:19, time: 0.959, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4946, decode.acc_seg: 82.7001, aux.loss_ce: 0.3035, aux.acc_seg: 75.8228, loss: 0.7980
2023-02-13 12:50:40,732 - mmseg - INFO - Iter [4950/15000]	lr: 7.005e-03, eta: 2:46:26, time: 0.964, data_time: 0.011, memory: 21690, decode.loss_ce: 0.5121, decode.acc_seg: 82.0458, aux.loss_ce: 0.2957, aux.acc_seg: 75.7805, loss: 0.8079
2023-02-13 12:51:28,422 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 12:51:28,423 - mmseg - INFO - Iter [5000/15000]	lr: 6.974e-03, eta: 2:45:32, time: 0.954, data_time: 0.017, memory: 21690, decode.loss_ce: 0.5277, decode.acc_seg: 81.8931, aux.loss_ce: 0.3038, aux.acc_seg: 75.7202, loss: 0.8315
2023-02-13 12:52:16,090 - mmseg - INFO - Iter [5050/15000]	lr: 6.943e-03, eta: 2:44:39, time: 0.953, data_time: 0.013, memory: 21690, decode.loss_ce: 0.4454, decode.acc_seg: 84.0203, aux.loss_ce: 0.2676, aux.acc_seg: 78.3425, loss: 0.7131
2023-02-13 12:53:04,373 - mmseg - INFO - Iter [5100/15000]	lr: 6.912e-03, eta: 2:43:46, time: 0.966, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4725, decode.acc_seg: 83.5872, aux.loss_ce: 0.3009, aux.acc_seg: 75.3315, loss: 0.7734
2023-02-13 12:53:51,362 - mmseg - INFO - Iter [5150/15000]	lr: 6.881e-03, eta: 2:42:52, time: 0.940, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4400, decode.acc_seg: 84.4799, aux.loss_ce: 0.2767, aux.acc_seg: 77.2446, loss: 0.7167
2023-02-13 12:54:39,488 - mmseg - INFO - Iter [5200/15000]	lr: 6.850e-03, eta: 2:41:59, time: 0.963, data_time: 0.016, memory: 21690, decode.loss_ce: 0.4763, decode.acc_seg: 83.1064, aux.loss_ce: 0.2974, aux.acc_seg: 76.2011, loss: 0.7737
2023-02-13 12:55:28,412 - mmseg - INFO - Iter [5250/15000]	lr: 6.819e-03, eta: 2:41:08, time: 0.978, data_time: 0.016, memory: 21690, decode.loss_ce: 0.4697, decode.acc_seg: 83.7768, aux.loss_ce: 0.2944, aux.acc_seg: 76.2897, loss: 0.7642
2023-02-13 12:56:17,299 - mmseg - INFO - Iter [5300/15000]	lr: 6.788e-03, eta: 2:40:18, time: 0.978, data_time: 0.055, memory: 21690, decode.loss_ce: 0.4236, decode.acc_seg: 84.9026, aux.loss_ce: 0.2749, aux.acc_seg: 78.2860, loss: 0.6985
2023-02-13 12:57:06,120 - mmseg - INFO - Iter [5350/15000]	lr: 6.757e-03, eta: 2:39:27, time: 0.976, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4580, decode.acc_seg: 84.3864, aux.loss_ce: 0.2698, aux.acc_seg: 78.6786, loss: 0.7278
2023-02-13 12:57:53,816 - mmseg - INFO - Iter [5400/15000]	lr: 6.726e-03, eta: 2:38:34, time: 0.954, data_time: 0.013, memory: 21690, decode.loss_ce: 0.4179, decode.acc_seg: 85.8225, aux.loss_ce: 0.2573, aux.acc_seg: 79.1343, loss: 0.6752
2023-02-13 12:58:42,705 - mmseg - INFO - Iter [5450/15000]	lr: 6.695e-03, eta: 2:37:43, time: 0.978, data_time: 0.019, memory: 21690, decode.loss_ce: 0.3755, decode.acc_seg: 87.0478, aux.loss_ce: 0.2630, aux.acc_seg: 78.8897, loss: 0.6385
2023-02-13 12:59:30,954 - mmseg - INFO - Iter [5500/15000]	lr: 6.664e-03, eta: 2:36:51, time: 0.965, data_time: 0.011, memory: 21690, decode.loss_ce: 0.4191, decode.acc_seg: 85.4554, aux.loss_ce: 0.2774, aux.acc_seg: 77.8397, loss: 0.6966
2023-02-13 13:00:17,918 - mmseg - INFO - Iter [5550/15000]	lr: 6.633e-03, eta: 2:35:57, time: 0.939, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4407, decode.acc_seg: 84.9601, aux.loss_ce: 0.2787, aux.acc_seg: 77.9647, loss: 0.7194
2023-02-13 13:01:05,933 - mmseg - INFO - Iter [5600/15000]	lr: 6.601e-03, eta: 2:35:05, time: 0.960, data_time: 0.010, memory: 21690, decode.loss_ce: 0.4378, decode.acc_seg: 85.2709, aux.loss_ce: 0.2918, aux.acc_seg: 76.6221, loss: 0.7296
2023-02-13 13:01:53,848 - mmseg - INFO - Iter [5650/15000]	lr: 6.570e-03, eta: 2:34:13, time: 0.958, data_time: 0.017, memory: 21690, decode.loss_ce: 0.4425, decode.acc_seg: 84.3045, aux.loss_ce: 0.2676, aux.acc_seg: 78.5287, loss: 0.7101
2023-02-13 13:02:42,520 - mmseg - INFO - Iter [5700/15000]	lr: 6.539e-03, eta: 2:33:22, time: 0.973, data_time: 0.014, memory: 21690, decode.loss_ce: 0.3773, decode.acc_seg: 86.4500, aux.loss_ce: 0.2653, aux.acc_seg: 78.6009, loss: 0.6427
2023-02-13 13:03:29,373 - mmseg - INFO - Iter [5750/15000]	lr: 6.508e-03, eta: 2:32:29, time: 0.937, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4716, decode.acc_seg: 84.0510, aux.loss_ce: 0.2819, aux.acc_seg: 77.1751, loss: 0.7535
2023-02-13 13:04:17,418 - mmseg - INFO - Iter [5800/15000]	lr: 6.477e-03, eta: 2:31:37, time: 0.961, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4432, decode.acc_seg: 84.6476, aux.loss_ce: 0.2747, aux.acc_seg: 78.4241, loss: 0.7179
2023-02-13 13:05:06,775 - mmseg - INFO - Iter [5850/15000]	lr: 6.446e-03, eta: 2:30:47, time: 0.987, data_time: 0.012, memory: 21690, decode.loss_ce: 0.4626, decode.acc_seg: 84.4980, aux.loss_ce: 0.2915, aux.acc_seg: 76.1469, loss: 0.7541
2023-02-13 13:05:55,071 - mmseg - INFO - Iter [5900/15000]	lr: 6.414e-03, eta: 2:29:56, time: 0.966, data_time: 0.020, memory: 21690, decode.loss_ce: 0.4269, decode.acc_seg: 85.3045, aux.loss_ce: 0.2810, aux.acc_seg: 77.1680, loss: 0.7079
2023-02-13 13:06:43,414 - mmseg - INFO - Iter [5950/15000]	lr: 6.383e-03, eta: 2:29:05, time: 0.967, data_time: 0.011, memory: 21690, decode.loss_ce: 0.3975, decode.acc_seg: 86.4365, aux.loss_ce: 0.2550, aux.acc_seg: 79.1853, loss: 0.6525
2023-02-13 13:07:30,222 - mmseg - INFO - Saving checkpoint at 6000 iterations
2023-02-13 13:07:31,691 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 13:07:31,691 - mmseg - INFO - Iter [6000/15000]	lr: 6.352e-03, eta: 2:28:14, time: 0.966, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4241, decode.acc_seg: 85.2569, aux.loss_ce: 0.2710, aux.acc_seg: 77.8026, loss: 0.6951
2023-02-13 13:09:35,031 - mmseg - INFO - per class results:
2023-02-13 13:09:35,033 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 90.42 | 94.53 |
|  aeroplane  | 84.58 | 89.85 |
|   bicycle   | 34.63 | 74.74 |
|     bird    | 59.26 | 62.23 |
|     boat    | 60.87 | 73.51 |
|    bottle   | 54.69 | 79.85 |
|     bus     | 86.58 | 96.63 |
|     car     | 75.91 | 88.87 |
|     cat     | 74.84 | 91.06 |
|    chair    | 19.12 | 34.95 |
|     cow     | 66.49 | 74.43 |
| diningtable |  39.1 | 46.15 |
|     dog     | 65.37 | 86.73 |
|    horse    | 64.56 | 82.41 |
|  motorbike  | 69.61 | 79.24 |
|    person   | 77.09 | 84.96 |
| pottedplant | 32.39 | 68.39 |
|    sheep    | 68.05 | 84.25 |
|     sofa    | 38.98 | 49.91 |
|    train    | 80.89 | 89.18 |
|  tvmonitor  | 53.92 | 75.18 |
+-------------+-------+-------+
2023-02-13 13:09:35,035 - mmseg - INFO - Summary:
2023-02-13 13:09:35,035 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 90.43 | 61.78 | 76.53 |
+-------+-------+-------+
2023-02-13 13:09:35,038 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 13:09:35,038 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.9043, mIoU: 0.6178, mAcc: 0.7653, IoU.background: 0.9042, IoU.aeroplane: 0.8458, IoU.bicycle: 0.3463, IoU.bird: 0.5926, IoU.boat: 0.6087, IoU.bottle: 0.5469, IoU.bus: 0.8658, IoU.car: 0.7591, IoU.cat: 0.7484, IoU.chair: 0.1912, IoU.cow: 0.6649, IoU.diningtable: 0.3910, IoU.dog: 0.6537, IoU.horse: 0.6456, IoU.motorbike: 0.6961, IoU.person: 0.7709, IoU.pottedplant: 0.3239, IoU.sheep: 0.6805, IoU.sofa: 0.3898, IoU.train: 0.8089, IoU.tvmonitor: 0.5392, Acc.background: 0.9453, Acc.aeroplane: 0.8985, Acc.bicycle: 0.7474, Acc.bird: 0.6223, Acc.boat: 0.7351, Acc.bottle: 0.7985, Acc.bus: 0.9663, Acc.car: 0.8887, Acc.cat: 0.9106, Acc.chair: 0.3495, Acc.cow: 0.7443, Acc.diningtable: 0.4615, Acc.dog: 0.8673, Acc.horse: 0.8241, Acc.motorbike: 0.7924, Acc.person: 0.8496, Acc.pottedplant: 0.6839, Acc.sheep: 0.8425, Acc.sofa: 0.4991, Acc.train: 0.8918, Acc.tvmonitor: 0.7518
2023-02-13 13:10:21,749 - mmseg - INFO - Iter [6050/15000]	lr: 6.321e-03, eta: 2:30:23, time: 3.401, data_time: 2.477, memory: 21690, decode.loss_ce: 0.4437, decode.acc_seg: 84.6736, aux.loss_ce: 0.2816, aux.acc_seg: 77.1974, loss: 0.7253
2023-02-13 13:11:08,543 - mmseg - INFO - Iter [6100/15000]	lr: 6.289e-03, eta: 2:29:27, time: 0.936, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4482, decode.acc_seg: 84.9231, aux.loss_ce: 0.2731, aux.acc_seg: 78.4882, loss: 0.7213
2023-02-13 13:11:55,442 - mmseg - INFO - Iter [6150/15000]	lr: 6.258e-03, eta: 2:28:32, time: 0.938, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4302, decode.acc_seg: 84.9764, aux.loss_ce: 0.2842, aux.acc_seg: 77.1752, loss: 0.7144
2023-02-13 13:12:43,828 - mmseg - INFO - Iter [6200/15000]	lr: 6.227e-03, eta: 2:27:39, time: 0.968, data_time: 0.017, memory: 21690, decode.loss_ce: 0.4364, decode.acc_seg: 85.1332, aux.loss_ce: 0.2772, aux.acc_seg: 77.8732, loss: 0.7136
2023-02-13 13:13:32,523 - mmseg - INFO - Iter [6250/15000]	lr: 6.195e-03, eta: 2:26:46, time: 0.974, data_time: 0.016, memory: 21690, decode.loss_ce: 0.4049, decode.acc_seg: 85.2772, aux.loss_ce: 0.2761, aux.acc_seg: 77.4608, loss: 0.6809
2023-02-13 13:14:20,443 - mmseg - INFO - Iter [6300/15000]	lr: 6.164e-03, eta: 2:25:53, time: 0.958, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4616, decode.acc_seg: 83.6280, aux.loss_ce: 0.2914, aux.acc_seg: 76.3049, loss: 0.7531
2023-02-13 13:15:08,326 - mmseg - INFO - Iter [6350/15000]	lr: 6.133e-03, eta: 2:24:59, time: 0.958, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4381, decode.acc_seg: 84.5509, aux.loss_ce: 0.2793, aux.acc_seg: 77.3222, loss: 0.7174
2023-02-13 13:15:55,752 - mmseg - INFO - Iter [6400/15000]	lr: 6.101e-03, eta: 2:24:05, time: 0.949, data_time: 0.012, memory: 21690, decode.loss_ce: 0.4547, decode.acc_seg: 84.6343, aux.loss_ce: 0.2816, aux.acc_seg: 77.2741, loss: 0.7364
2023-02-13 13:16:45,034 - mmseg - INFO - Iter [6450/15000]	lr: 6.070e-03, eta: 2:23:13, time: 0.986, data_time: 0.018, memory: 21690, decode.loss_ce: 0.4349, decode.acc_seg: 85.2821, aux.loss_ce: 0.2813, aux.acc_seg: 77.6444, loss: 0.7161
2023-02-13 13:17:33,105 - mmseg - INFO - Iter [6500/15000]	lr: 6.038e-03, eta: 2:22:20, time: 0.961, data_time: 0.012, memory: 21690, decode.loss_ce: 0.4639, decode.acc_seg: 84.0656, aux.loss_ce: 0.2765, aux.acc_seg: 77.6531, loss: 0.7404
2023-02-13 13:18:20,009 - mmseg - INFO - Iter [6550/15000]	lr: 6.007e-03, eta: 2:21:26, time: 0.938, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4559, decode.acc_seg: 84.1182, aux.loss_ce: 0.2812, aux.acc_seg: 77.0692, loss: 0.7371
2023-02-13 13:19:06,826 - mmseg - INFO - Iter [6600/15000]	lr: 5.976e-03, eta: 2:20:31, time: 0.936, data_time: 0.010, memory: 21690, decode.loss_ce: 0.4318, decode.acc_seg: 85.4412, aux.loss_ce: 0.2862, aux.acc_seg: 76.8166, loss: 0.7180
2023-02-13 13:19:57,984 - mmseg - INFO - Iter [6650/15000]	lr: 5.944e-03, eta: 2:19:42, time: 1.023, data_time: 0.064, memory: 21690, decode.loss_ce: 0.3598, decode.acc_seg: 87.0397, aux.loss_ce: 0.2471, aux.acc_seg: 79.9508, loss: 0.6068
2023-02-13 13:20:46,255 - mmseg - INFO - Iter [6700/15000]	lr: 5.913e-03, eta: 2:18:49, time: 0.965, data_time: 0.017, memory: 21690, decode.loss_ce: 0.3932, decode.acc_seg: 86.2483, aux.loss_ce: 0.2595, aux.acc_seg: 78.9283, loss: 0.6527
2023-02-13 13:21:32,881 - mmseg - INFO - Iter [6750/15000]	lr: 5.881e-03, eta: 2:17:55, time: 0.932, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3945, decode.acc_seg: 85.4601, aux.loss_ce: 0.2713, aux.acc_seg: 77.7096, loss: 0.6658
2023-02-13 13:22:19,792 - mmseg - INFO - Iter [6800/15000]	lr: 5.850e-03, eta: 2:17:01, time: 0.938, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4053, decode.acc_seg: 86.3821, aux.loss_ce: 0.2613, aux.acc_seg: 79.1629, loss: 0.6666
2023-02-13 13:23:07,711 - mmseg - INFO - Iter [6850/15000]	lr: 5.818e-03, eta: 2:16:08, time: 0.958, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3966, decode.acc_seg: 86.7113, aux.loss_ce: 0.2605, aux.acc_seg: 78.8163, loss: 0.6571
2023-02-13 13:23:57,265 - mmseg - INFO - Iter [6900/15000]	lr: 5.786e-03, eta: 2:15:17, time: 0.991, data_time: 0.018, memory: 21690, decode.loss_ce: 0.4098, decode.acc_seg: 85.8435, aux.loss_ce: 0.2719, aux.acc_seg: 78.4990, loss: 0.6818
2023-02-13 13:24:45,059 - mmseg - INFO - Iter [6950/15000]	lr: 5.755e-03, eta: 2:14:25, time: 0.956, data_time: 0.014, memory: 21690, decode.loss_ce: 0.3806, decode.acc_seg: 87.1112, aux.loss_ce: 0.2675, aux.acc_seg: 78.9376, loss: 0.6481
2023-02-13 13:25:32,576 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 13:25:32,576 - mmseg - INFO - Iter [7000/15000]	lr: 5.723e-03, eta: 2:13:32, time: 0.950, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4386, decode.acc_seg: 84.6227, aux.loss_ce: 0.2877, aux.acc_seg: 77.1801, loss: 0.7263
2023-02-13 13:26:19,812 - mmseg - INFO - Iter [7050/15000]	lr: 5.692e-03, eta: 2:12:38, time: 0.945, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3340, decode.acc_seg: 87.7579, aux.loss_ce: 0.2439, aux.acc_seg: 80.1035, loss: 0.5779
2023-02-13 13:27:06,889 - mmseg - INFO - Iter [7100/15000]	lr: 5.660e-03, eta: 2:11:45, time: 0.942, data_time: 0.010, memory: 21690, decode.loss_ce: 0.4478, decode.acc_seg: 85.0052, aux.loss_ce: 0.2777, aux.acc_seg: 78.3031, loss: 0.7254
2023-02-13 13:27:56,152 - mmseg - INFO - Iter [7150/15000]	lr: 5.628e-03, eta: 2:10:54, time: 0.985, data_time: 0.018, memory: 21690, decode.loss_ce: 0.3817, decode.acc_seg: 87.0718, aux.loss_ce: 0.2445, aux.acc_seg: 80.2251, loss: 0.6263
2023-02-13 13:28:43,878 - mmseg - INFO - Iter [7200/15000]	lr: 5.597e-03, eta: 2:10:01, time: 0.955, data_time: 0.016, memory: 21690, decode.loss_ce: 0.3945, decode.acc_seg: 86.2043, aux.loss_ce: 0.2657, aux.acc_seg: 77.9580, loss: 0.6602
2023-02-13 13:29:31,878 - mmseg - INFO - Iter [7250/15000]	lr: 5.565e-03, eta: 2:09:09, time: 0.960, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4081, decode.acc_seg: 86.0561, aux.loss_ce: 0.2683, aux.acc_seg: 78.4678, loss: 0.6764
2023-02-13 13:30:19,104 - mmseg - INFO - Iter [7300/15000]	lr: 5.533e-03, eta: 2:08:16, time: 0.944, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4048, decode.acc_seg: 86.0471, aux.loss_ce: 0.2599, aux.acc_seg: 78.5874, loss: 0.6647
2023-02-13 13:31:06,234 - mmseg - INFO - Iter [7350/15000]	lr: 5.501e-03, eta: 2:07:23, time: 0.943, data_time: 0.010, memory: 21690, decode.loss_ce: 0.4262, decode.acc_seg: 85.5714, aux.loss_ce: 0.2683, aux.acc_seg: 78.7318, loss: 0.6945
2023-02-13 13:31:54,800 - mmseg - INFO - Iter [7400/15000]	lr: 5.470e-03, eta: 2:06:32, time: 0.971, data_time: 0.020, memory: 21690, decode.loss_ce: 0.4460, decode.acc_seg: 84.9149, aux.loss_ce: 0.2876, aux.acc_seg: 77.3011, loss: 0.7336
2023-02-13 13:32:43,040 - mmseg - INFO - Iter [7450/15000]	lr: 5.438e-03, eta: 2:05:40, time: 0.965, data_time: 0.015, memory: 21690, decode.loss_ce: 0.3852, decode.acc_seg: 86.8045, aux.loss_ce: 0.2513, aux.acc_seg: 79.3808, loss: 0.6366
2023-02-13 13:33:29,787 - mmseg - INFO - Iter [7500/15000]	lr: 5.406e-03, eta: 2:04:47, time: 0.935, data_time: 0.009, memory: 21690, decode.loss_ce: 0.4141, decode.acc_seg: 86.3210, aux.loss_ce: 0.2746, aux.acc_seg: 78.2067, loss: 0.6887
2023-02-13 13:34:17,142 - mmseg - INFO - Iter [7550/15000]	lr: 5.374e-03, eta: 2:03:55, time: 0.947, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3543, decode.acc_seg: 87.7794, aux.loss_ce: 0.2453, aux.acc_seg: 80.0646, loss: 0.5996
2023-02-13 13:35:05,557 - mmseg - INFO - Iter [7600/15000]	lr: 5.342e-03, eta: 2:03:03, time: 0.968, data_time: 0.010, memory: 21690, decode.loss_ce: 0.3769, decode.acc_seg: 86.6213, aux.loss_ce: 0.2501, aux.acc_seg: 79.5991, loss: 0.6270
2023-02-13 13:35:54,068 - mmseg - INFO - Iter [7650/15000]	lr: 5.310e-03, eta: 2:02:12, time: 0.970, data_time: 0.017, memory: 21690, decode.loss_ce: 0.4203, decode.acc_seg: 85.5892, aux.loss_ce: 0.2634, aux.acc_seg: 79.2274, loss: 0.6837
2023-02-13 13:36:43,477 - mmseg - INFO - Iter [7700/15000]	lr: 5.278e-03, eta: 2:01:22, time: 0.988, data_time: 0.013, memory: 21690, decode.loss_ce: 0.4265, decode.acc_seg: 85.6675, aux.loss_ce: 0.2662, aux.acc_seg: 79.2736, loss: 0.6926
2023-02-13 13:37:30,670 - mmseg - INFO - Iter [7750/15000]	lr: 5.246e-03, eta: 2:00:29, time: 0.944, data_time: 0.010, memory: 21690, decode.loss_ce: 0.3731, decode.acc_seg: 87.0051, aux.loss_ce: 0.2563, aux.acc_seg: 79.1001, loss: 0.6294
2023-02-13 13:38:18,411 - mmseg - INFO - Iter [7800/15000]	lr: 5.215e-03, eta: 1:59:38, time: 0.955, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3953, decode.acc_seg: 86.4667, aux.loss_ce: 0.2587, aux.acc_seg: 78.8773, loss: 0.6540
2023-02-13 13:39:06,560 - mmseg - INFO - Iter [7850/15000]	lr: 5.183e-03, eta: 1:58:46, time: 0.963, data_time: 0.010, memory: 21690, decode.loss_ce: 0.3990, decode.acc_seg: 86.2731, aux.loss_ce: 0.2562, aux.acc_seg: 79.3608, loss: 0.6553
2023-02-13 13:39:55,588 - mmseg - INFO - Iter [7900/15000]	lr: 5.151e-03, eta: 1:57:56, time: 0.981, data_time: 0.019, memory: 21690, decode.loss_ce: 0.3933, decode.acc_seg: 86.1719, aux.loss_ce: 0.2610, aux.acc_seg: 79.1287, loss: 0.6543
2023-02-13 13:40:45,939 - mmseg - INFO - Iter [7950/15000]	lr: 5.119e-03, eta: 1:57:06, time: 1.007, data_time: 0.068, memory: 21690, decode.loss_ce: 0.3991, decode.acc_seg: 86.2043, aux.loss_ce: 0.2460, aux.acc_seg: 80.3621, loss: 0.6452
2023-02-13 13:41:32,815 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 13:41:32,815 - mmseg - INFO - Iter [8000/15000]	lr: 5.087e-03, eta: 1:56:14, time: 0.937, data_time: 0.010, memory: 21690, decode.loss_ce: 0.3540, decode.acc_seg: 87.2830, aux.loss_ce: 0.2479, aux.acc_seg: 79.5275, loss: 0.6020
2023-02-13 13:42:20,766 - mmseg - INFO - Iter [8050/15000]	lr: 5.054e-03, eta: 1:55:22, time: 0.959, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3796, decode.acc_seg: 86.5292, aux.loss_ce: 0.2544, aux.acc_seg: 79.1413, loss: 0.6340
2023-02-13 13:43:07,959 - mmseg - INFO - Iter [8100/15000]	lr: 5.022e-03, eta: 1:54:30, time: 0.944, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3650, decode.acc_seg: 86.9417, aux.loss_ce: 0.2488, aux.acc_seg: 79.4664, loss: 0.6138
2023-02-13 13:43:56,356 - mmseg - INFO - Iter [8150/15000]	lr: 4.990e-03, eta: 1:53:39, time: 0.968, data_time: 0.017, memory: 21690, decode.loss_ce: 0.3245, decode.acc_seg: 88.2425, aux.loss_ce: 0.2429, aux.acc_seg: 80.6223, loss: 0.5674
2023-02-13 13:44:44,328 - mmseg - INFO - Iter [8200/15000]	lr: 4.958e-03, eta: 1:52:48, time: 0.959, data_time: 0.018, memory: 21690, decode.loss_ce: 0.3857, decode.acc_seg: 85.9792, aux.loss_ce: 0.2558, aux.acc_seg: 79.1895, loss: 0.6415
2023-02-13 13:45:31,402 - mmseg - INFO - Iter [8250/15000]	lr: 4.926e-03, eta: 1:51:56, time: 0.941, data_time: 0.010, memory: 21690, decode.loss_ce: 0.3738, decode.acc_seg: 87.3563, aux.loss_ce: 0.2628, aux.acc_seg: 78.8369, loss: 0.6366
2023-02-13 13:46:18,087 - mmseg - INFO - Iter [8300/15000]	lr: 4.894e-03, eta: 1:51:04, time: 0.934, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3715, decode.acc_seg: 87.0110, aux.loss_ce: 0.2540, aux.acc_seg: 79.9907, loss: 0.6255
2023-02-13 13:47:04,989 - mmseg - INFO - Iter [8350/15000]	lr: 4.862e-03, eta: 1:50:12, time: 0.938, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3443, decode.acc_seg: 87.5064, aux.loss_ce: 0.2448, aux.acc_seg: 80.0696, loss: 0.5891
2023-02-13 13:47:52,387 - mmseg - INFO - Iter [8400/15000]	lr: 4.829e-03, eta: 1:49:20, time: 0.948, data_time: 0.013, memory: 21690, decode.loss_ce: 0.3218, decode.acc_seg: 88.8587, aux.loss_ce: 0.2404, aux.acc_seg: 80.3125, loss: 0.5622
2023-02-13 13:48:40,533 - mmseg - INFO - Iter [8450/15000]	lr: 4.797e-03, eta: 1:48:30, time: 0.963, data_time: 0.019, memory: 21690, decode.loss_ce: 0.3516, decode.acc_seg: 87.7299, aux.loss_ce: 0.2423, aux.acc_seg: 80.2462, loss: 0.5939
2023-02-13 13:49:28,818 - mmseg - INFO - Iter [8500/15000]	lr: 4.765e-03, eta: 1:47:39, time: 0.966, data_time: 0.011, memory: 21690, decode.loss_ce: 0.3610, decode.acc_seg: 87.4179, aux.loss_ce: 0.2481, aux.acc_seg: 79.7733, loss: 0.6092
2023-02-13 13:50:15,544 - mmseg - INFO - Iter [8550/15000]	lr: 4.733e-03, eta: 1:46:47, time: 0.934, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3496, decode.acc_seg: 87.6562, aux.loss_ce: 0.2278, aux.acc_seg: 81.7061, loss: 0.5774
2023-02-13 13:51:02,654 - mmseg - INFO - Iter [8600/15000]	lr: 4.700e-03, eta: 1:45:55, time: 0.942, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3487, decode.acc_seg: 87.8597, aux.loss_ce: 0.2348, aux.acc_seg: 81.0780, loss: 0.5835
2023-02-13 13:51:51,921 - mmseg - INFO - Iter [8650/15000]	lr: 4.668e-03, eta: 1:45:05, time: 0.985, data_time: 0.011, memory: 21690, decode.loss_ce: 0.3281, decode.acc_seg: 88.2282, aux.loss_ce: 0.2321, aux.acc_seg: 80.8193, loss: 0.5602
2023-02-13 13:52:39,749 - mmseg - INFO - Iter [8700/15000]	lr: 4.635e-03, eta: 1:44:14, time: 0.957, data_time: 0.017, memory: 21690, decode.loss_ce: 0.3550, decode.acc_seg: 87.1818, aux.loss_ce: 0.2431, aux.acc_seg: 80.0493, loss: 0.5980
2023-02-13 13:53:28,070 - mmseg - INFO - Iter [8750/15000]	lr: 4.603e-03, eta: 1:43:24, time: 0.966, data_time: 0.013, memory: 21690, decode.loss_ce: 0.3640, decode.acc_seg: 86.7390, aux.loss_ce: 0.2488, aux.acc_seg: 80.0975, loss: 0.6128
2023-02-13 13:54:15,004 - mmseg - INFO - Iter [8800/15000]	lr: 4.571e-03, eta: 1:42:32, time: 0.939, data_time: 0.010, memory: 21690, decode.loss_ce: 0.4203, decode.acc_seg: 86.0282, aux.loss_ce: 0.2628, aux.acc_seg: 78.9510, loss: 0.6832
2023-02-13 13:55:02,528 - mmseg - INFO - Iter [8850/15000]	lr: 4.538e-03, eta: 1:41:41, time: 0.950, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3855, decode.acc_seg: 86.1572, aux.loss_ce: 0.2720, aux.acc_seg: 78.2523, loss: 0.6575
2023-02-13 13:55:49,551 - mmseg - INFO - Iter [8900/15000]	lr: 4.506e-03, eta: 1:40:50, time: 0.940, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3443, decode.acc_seg: 87.9013, aux.loss_ce: 0.2386, aux.acc_seg: 80.4744, loss: 0.5829
2023-02-13 13:56:37,204 - mmseg - INFO - Iter [8950/15000]	lr: 4.473e-03, eta: 1:39:59, time: 0.953, data_time: 0.016, memory: 21690, decode.loss_ce: 0.3216, decode.acc_seg: 88.7048, aux.loss_ce: 0.2379, aux.acc_seg: 81.1272, loss: 0.5596
2023-02-13 13:57:25,990 - mmseg - INFO - Saving checkpoint at 9000 iterations
2023-02-13 13:57:27,791 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 13:57:27,792 - mmseg - INFO - Iter [9000/15000]	lr: 4.441e-03, eta: 1:39:10, time: 1.012, data_time: 0.019, memory: 21690, decode.loss_ce: 0.3751, decode.acc_seg: 87.4704, aux.loss_ce: 0.2477, aux.acc_seg: 80.5051, loss: 0.6228
2023-02-13 13:59:21,436 - mmseg - INFO - per class results:
2023-02-13 13:59:21,438 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 90.27 |  93.8 |
|  aeroplane  | 85.25 | 90.97 |
|   bicycle   | 33.04 | 88.63 |
|     bird    |  78.6 | 82.58 |
|     boat    | 59.62 | 74.85 |
|    bottle   |  55.3 | 79.29 |
|     bus     | 85.56 | 94.97 |
|     car     | 76.73 | 89.74 |
|     cat     | 82.92 | 95.79 |
|    chair    | 22.82 |  31.1 |
|     cow     | 70.86 | 86.42 |
| diningtable | 36.08 | 39.56 |
|     dog     | 77.95 |  85.3 |
|    horse    | 67.25 | 93.14 |
|  motorbike  | 74.76 |  89.7 |
|    person   | 77.32 | 90.12 |
| pottedplant | 47.24 | 58.02 |
|    sheep    | 63.78 | 84.16 |
|     sofa    | 37.85 | 48.09 |
|    train    | 74.42 | 94.85 |
|  tvmonitor  | 41.96 | 87.19 |
+-------------+-------+-------+
2023-02-13 13:59:21,438 - mmseg - INFO - Summary:
2023-02-13 13:59:21,438 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 90.83 | 63.79 | 79.92 |
+-------+-------+-------+
2023-02-13 13:59:21,438 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 13:59:21,439 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.9083, mIoU: 0.6379, mAcc: 0.7992, IoU.background: 0.9027, IoU.aeroplane: 0.8525, IoU.bicycle: 0.3304, IoU.bird: 0.7860, IoU.boat: 0.5962, IoU.bottle: 0.5530, IoU.bus: 0.8556, IoU.car: 0.7673, IoU.cat: 0.8292, IoU.chair: 0.2282, IoU.cow: 0.7086, IoU.diningtable: 0.3608, IoU.dog: 0.7795, IoU.horse: 0.6725, IoU.motorbike: 0.7476, IoU.person: 0.7732, IoU.pottedplant: 0.4724, IoU.sheep: 0.6378, IoU.sofa: 0.3785, IoU.train: 0.7442, IoU.tvmonitor: 0.4196, Acc.background: 0.9380, Acc.aeroplane: 0.9097, Acc.bicycle: 0.8863, Acc.bird: 0.8258, Acc.boat: 0.7485, Acc.bottle: 0.7929, Acc.bus: 0.9497, Acc.car: 0.8974, Acc.cat: 0.9579, Acc.chair: 0.3110, Acc.cow: 0.8642, Acc.diningtable: 0.3956, Acc.dog: 0.8530, Acc.horse: 0.9314, Acc.motorbike: 0.8970, Acc.person: 0.9012, Acc.pottedplant: 0.5802, Acc.sheep: 0.8416, Acc.sofa: 0.4809, Acc.train: 0.9485, Acc.tvmonitor: 0.8719
2023-02-13 14:00:08,151 - mmseg - INFO - Iter [9050/15000]	lr: 4.408e-03, eta: 1:39:33, time: 3.207, data_time: 2.282, memory: 21690, decode.loss_ce: 0.3678, decode.acc_seg: 86.5821, aux.loss_ce: 0.2591, aux.acc_seg: 79.0987, loss: 0.6270
2023-02-13 14:00:56,310 - mmseg - INFO - Iter [9100/15000]	lr: 4.375e-03, eta: 1:38:42, time: 0.963, data_time: 0.017, memory: 21690, decode.loss_ce: 0.3292, decode.acc_seg: 88.4952, aux.loss_ce: 0.2264, aux.acc_seg: 81.8446, loss: 0.5557
2023-02-13 14:01:44,373 - mmseg - INFO - Iter [9150/15000]	lr: 4.343e-03, eta: 1:37:50, time: 0.961, data_time: 0.019, memory: 21690, decode.loss_ce: 0.2731, decode.acc_seg: 90.0090, aux.loss_ce: 0.2107, aux.acc_seg: 82.8056, loss: 0.4839
2023-02-13 14:02:32,423 - mmseg - INFO - Iter [9200/15000]	lr: 4.310e-03, eta: 1:36:59, time: 0.961, data_time: 0.012, memory: 21690, decode.loss_ce: 0.3535, decode.acc_seg: 88.1908, aux.loss_ce: 0.2384, aux.acc_seg: 80.9162, loss: 0.5919
2023-02-13 14:03:19,204 - mmseg - INFO - Iter [9250/15000]	lr: 4.278e-03, eta: 1:36:06, time: 0.936, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3741, decode.acc_seg: 87.0795, aux.loss_ce: 0.2482, aux.acc_seg: 79.9561, loss: 0.6223
2023-02-13 14:04:08,642 - mmseg - INFO - Iter [9300/15000]	lr: 4.245e-03, eta: 1:35:16, time: 0.989, data_time: 0.055, memory: 21690, decode.loss_ce: 0.2867, decode.acc_seg: 90.1194, aux.loss_ce: 0.2261, aux.acc_seg: 82.0808, loss: 0.5128
2023-02-13 14:04:56,284 - mmseg - INFO - Iter [9350/15000]	lr: 4.212e-03, eta: 1:34:24, time: 0.953, data_time: 0.014, memory: 21690, decode.loss_ce: 0.3200, decode.acc_seg: 88.3052, aux.loss_ce: 0.2284, aux.acc_seg: 81.7225, loss: 0.5485
2023-02-13 14:05:44,890 - mmseg - INFO - Iter [9400/15000]	lr: 4.179e-03, eta: 1:33:33, time: 0.972, data_time: 0.018, memory: 21690, decode.loss_ce: 0.3497, decode.acc_seg: 87.9209, aux.loss_ce: 0.2409, aux.acc_seg: 81.1237, loss: 0.5906
2023-02-13 14:06:32,596 - mmseg - INFO - Iter [9450/15000]	lr: 4.147e-03, eta: 1:32:42, time: 0.954, data_time: 0.015, memory: 21690, decode.loss_ce: 0.3452, decode.acc_seg: 87.9216, aux.loss_ce: 0.2366, aux.acc_seg: 80.7114, loss: 0.5819
2023-02-13 14:07:19,955 - mmseg - INFO - Iter [9500/15000]	lr: 4.114e-03, eta: 1:31:50, time: 0.947, data_time: 0.010, memory: 21690, decode.loss_ce: 0.3390, decode.acc_seg: 87.4918, aux.loss_ce: 0.2357, aux.acc_seg: 80.5784, loss: 0.5747
2023-02-13 14:08:08,071 - mmseg - INFO - Iter [9550/15000]	lr: 4.081e-03, eta: 1:30:59, time: 0.962, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3355, decode.acc_seg: 88.0243, aux.loss_ce: 0.2369, aux.acc_seg: 81.2910, loss: 0.5724
2023-02-13 14:08:55,993 - mmseg - INFO - Iter [9600/15000]	lr: 4.048e-03, eta: 1:30:07, time: 0.958, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3508, decode.acc_seg: 86.7227, aux.loss_ce: 0.2499, aux.acc_seg: 79.2153, loss: 0.6007
2023-02-13 14:09:42,813 - mmseg - INFO - Iter [9650/15000]	lr: 4.015e-03, eta: 1:29:15, time: 0.936, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3539, decode.acc_seg: 87.3553, aux.loss_ce: 0.2382, aux.acc_seg: 80.3914, loss: 0.5920
2023-02-13 14:10:30,141 - mmseg - INFO - Iter [9700/15000]	lr: 3.982e-03, eta: 1:28:24, time: 0.947, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3228, decode.acc_seg: 88.7314, aux.loss_ce: 0.2314, aux.acc_seg: 80.7035, loss: 0.5542
2023-02-13 14:11:18,339 - mmseg - INFO - Iter [9750/15000]	lr: 3.949e-03, eta: 1:27:33, time: 0.964, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3449, decode.acc_seg: 87.4225, aux.loss_ce: 0.2407, aux.acc_seg: 80.7474, loss: 0.5857
2023-02-13 14:12:05,196 - mmseg - INFO - Iter [9800/15000]	lr: 3.916e-03, eta: 1:26:41, time: 0.937, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3503, decode.acc_seg: 88.1134, aux.loss_ce: 0.2351, aux.acc_seg: 80.7325, loss: 0.5854
2023-02-13 14:12:54,081 - mmseg - INFO - Iter [9850/15000]	lr: 3.883e-03, eta: 1:25:51, time: 0.978, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3253, decode.acc_seg: 88.3402, aux.loss_ce: 0.2365, aux.acc_seg: 80.6096, loss: 0.5619
2023-02-13 14:13:41,813 - mmseg - INFO - Iter [9900/15000]	lr: 3.850e-03, eta: 1:24:59, time: 0.955, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3178, decode.acc_seg: 88.6628, aux.loss_ce: 0.2330, aux.acc_seg: 80.8653, loss: 0.5509
2023-02-13 14:14:30,011 - mmseg - INFO - Iter [9950/15000]	lr: 3.817e-03, eta: 1:24:08, time: 0.964, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3321, decode.acc_seg: 87.8553, aux.loss_ce: 0.2399, aux.acc_seg: 80.2774, loss: 0.5720
2023-02-13 14:15:17,340 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 14:15:17,340 - mmseg - INFO - Iter [10000/15000]	lr: 3.784e-03, eta: 1:23:17, time: 0.947, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3357, decode.acc_seg: 88.3444, aux.loss_ce: 0.2216, aux.acc_seg: 81.9901, loss: 0.5572
2023-02-13 14:16:04,148 - mmseg - INFO - Iter [10050/15000]	lr: 3.751e-03, eta: 1:22:26, time: 0.936, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3195, decode.acc_seg: 88.5703, aux.loss_ce: 0.2303, aux.acc_seg: 80.6842, loss: 0.5497
2023-02-13 14:16:52,215 - mmseg - INFO - Iter [10100/15000]	lr: 3.718e-03, eta: 1:21:35, time: 0.961, data_time: 0.009, memory: 21690, decode.loss_ce: 0.2945, decode.acc_seg: 89.6330, aux.loss_ce: 0.2215, aux.acc_seg: 82.1875, loss: 0.5160
2023-02-13 14:17:41,434 - mmseg - INFO - Iter [10150/15000]	lr: 3.684e-03, eta: 1:20:44, time: 0.984, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3055, decode.acc_seg: 89.0218, aux.loss_ce: 0.2345, aux.acc_seg: 81.1756, loss: 0.5400
2023-02-13 14:18:30,473 - mmseg - INFO - Iter [10200/15000]	lr: 3.651e-03, eta: 1:19:54, time: 0.981, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3010, decode.acc_seg: 89.4312, aux.loss_ce: 0.2148, aux.acc_seg: 82.8294, loss: 0.5159
2023-02-13 14:19:17,741 - mmseg - INFO - Iter [10250/15000]	lr: 3.618e-03, eta: 1:19:03, time: 0.945, data_time: 0.010, memory: 21690, decode.loss_ce: 0.3130, decode.acc_seg: 89.3585, aux.loss_ce: 0.2102, aux.acc_seg: 83.0907, loss: 0.5232
2023-02-13 14:20:06,019 - mmseg - INFO - Iter [10300/15000]	lr: 3.584e-03, eta: 1:18:12, time: 0.966, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3269, decode.acc_seg: 88.6916, aux.loss_ce: 0.2274, aux.acc_seg: 81.6568, loss: 0.5544
2023-02-13 14:20:53,273 - mmseg - INFO - Iter [10350/15000]	lr: 3.551e-03, eta: 1:17:21, time: 0.945, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3223, decode.acc_seg: 88.8290, aux.loss_ce: 0.2268, aux.acc_seg: 81.4865, loss: 0.5492
2023-02-13 14:21:42,932 - mmseg - INFO - Iter [10400/15000]	lr: 3.518e-03, eta: 1:16:31, time: 0.993, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3168, decode.acc_seg: 88.7065, aux.loss_ce: 0.2269, aux.acc_seg: 81.3699, loss: 0.5437
2023-02-13 14:22:32,221 - mmseg - INFO - Iter [10450/15000]	lr: 3.484e-03, eta: 1:15:41, time: 0.986, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3094, decode.acc_seg: 88.8842, aux.loss_ce: 0.2246, aux.acc_seg: 81.8615, loss: 0.5339
2023-02-13 14:23:20,478 - mmseg - INFO - Iter [10500/15000]	lr: 3.451e-03, eta: 1:14:50, time: 0.965, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3055, decode.acc_seg: 89.3175, aux.loss_ce: 0.2310, aux.acc_seg: 81.1583, loss: 0.5365
2023-02-13 14:24:09,329 - mmseg - INFO - Iter [10550/15000]	lr: 3.417e-03, eta: 1:14:00, time: 0.977, data_time: 0.009, memory: 21690, decode.loss_ce: 0.3184, decode.acc_seg: 88.9100, aux.loss_ce: 0.2219, aux.acc_seg: 82.2930, loss: 0.5403
2023-02-13 14:25:00,635 - mmseg - INFO - Iter [10600/15000]	lr: 3.384e-03, eta: 1:13:11, time: 1.026, data_time: 0.055, memory: 21690, decode.loss_ce: 0.3104, decode.acc_seg: 88.4122, aux.loss_ce: 0.2232, aux.acc_seg: 82.0073, loss: 0.5336
2023-02-13 14:25:48,651 - mmseg - INFO - Iter [10650/15000]	lr: 3.350e-03, eta: 1:12:20, time: 0.960, data_time: 0.009, memory: 21690, decode.loss_ce: 0.2884, decode.acc_seg: 89.7632, aux.loss_ce: 0.2282, aux.acc_seg: 81.3953, loss: 0.5166
2023-02-13 14:26:37,003 - mmseg - INFO - Iter [10700/15000]	lr: 3.316e-03, eta: 1:11:29, time: 0.967, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3219, decode.acc_seg: 89.1055, aux.loss_ce: 0.2355, aux.acc_seg: 81.8206, loss: 0.5574
2023-02-13 14:27:26,630 - mmseg - INFO - Iter [10750/15000]	lr: 3.283e-03, eta: 1:10:39, time: 0.993, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2545, decode.acc_seg: 90.8590, aux.loss_ce: 0.2025, aux.acc_seg: 83.2698, loss: 0.4570
2023-02-13 14:28:14,725 - mmseg - INFO - Iter [10800/15000]	lr: 3.249e-03, eta: 1:09:49, time: 0.962, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3121, decode.acc_seg: 89.1758, aux.loss_ce: 0.2295, aux.acc_seg: 81.7273, loss: 0.5416
2023-02-13 14:29:04,634 - mmseg - INFO - Iter [10850/15000]	lr: 3.215e-03, eta: 1:08:59, time: 0.998, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2645, decode.acc_seg: 90.2746, aux.loss_ce: 0.2178, aux.acc_seg: 81.8711, loss: 0.4823
2023-02-13 14:29:51,337 - mmseg - INFO - Iter [10900/15000]	lr: 3.181e-03, eta: 1:08:08, time: 0.934, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3156, decode.acc_seg: 88.9604, aux.loss_ce: 0.2409, aux.acc_seg: 80.6797, loss: 0.5565
2023-02-13 14:30:38,971 - mmseg - INFO - Iter [10950/15000]	lr: 3.148e-03, eta: 1:07:17, time: 0.953, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2859, decode.acc_seg: 89.5123, aux.loss_ce: 0.1972, aux.acc_seg: 83.9882, loss: 0.4831
2023-02-13 14:31:25,334 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 14:31:25,335 - mmseg - INFO - Iter [11000/15000]	lr: 3.114e-03, eta: 1:06:26, time: 0.927, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2697, decode.acc_seg: 90.1822, aux.loss_ce: 0.2028, aux.acc_seg: 83.4822, loss: 0.4726
2023-02-13 14:32:11,653 - mmseg - INFO - Iter [11050/15000]	lr: 3.080e-03, eta: 1:05:35, time: 0.926, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2576, decode.acc_seg: 90.5309, aux.loss_ce: 0.2010, aux.acc_seg: 83.0171, loss: 0.4586
2023-02-13 14:32:57,785 - mmseg - INFO - Iter [11100/15000]	lr: 3.046e-03, eta: 1:04:44, time: 0.923, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2863, decode.acc_seg: 89.0524, aux.loss_ce: 0.2270, aux.acc_seg: 81.4324, loss: 0.5132
2023-02-13 14:33:43,920 - mmseg - INFO - Iter [11150/15000]	lr: 3.012e-03, eta: 1:03:53, time: 0.923, data_time: 0.009, memory: 21690, decode.loss_ce: 0.2720, decode.acc_seg: 90.0704, aux.loss_ce: 0.1984, aux.acc_seg: 83.7608, loss: 0.4704
2023-02-13 14:34:29,946 - mmseg - INFO - Iter [11200/15000]	lr: 2.978e-03, eta: 1:03:02, time: 0.921, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3320, decode.acc_seg: 88.4245, aux.loss_ce: 0.2412, aux.acc_seg: 80.3750, loss: 0.5733
2023-02-13 14:35:15,870 - mmseg - INFO - Iter [11250/15000]	lr: 2.944e-03, eta: 1:02:11, time: 0.918, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3276, decode.acc_seg: 88.3332, aux.loss_ce: 0.2165, aux.acc_seg: 82.1942, loss: 0.5441
2023-02-13 14:36:01,760 - mmseg - INFO - Iter [11300/15000]	lr: 2.910e-03, eta: 1:01:20, time: 0.918, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2997, decode.acc_seg: 89.0310, aux.loss_ce: 0.2137, aux.acc_seg: 82.5975, loss: 0.5133
2023-02-13 14:36:47,557 - mmseg - INFO - Iter [11350/15000]	lr: 2.875e-03, eta: 1:00:29, time: 0.916, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2959, decode.acc_seg: 89.5758, aux.loss_ce: 0.2027, aux.acc_seg: 83.4860, loss: 0.4986
2023-02-13 14:37:33,455 - mmseg - INFO - Iter [11400/15000]	lr: 2.841e-03, eta: 0:59:38, time: 0.918, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3080, decode.acc_seg: 89.2604, aux.loss_ce: 0.2296, aux.acc_seg: 81.7520, loss: 0.5375
2023-02-13 14:38:19,265 - mmseg - INFO - Iter [11450/15000]	lr: 2.807e-03, eta: 0:58:47, time: 0.916, data_time: 0.009, memory: 21690, decode.loss_ce: 0.2882, decode.acc_seg: 90.1059, aux.loss_ce: 0.2121, aux.acc_seg: 82.8738, loss: 0.5003
2023-02-13 14:39:05,038 - mmseg - INFO - Iter [11500/15000]	lr: 2.773e-03, eta: 0:57:56, time: 0.915, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2718, decode.acc_seg: 90.0015, aux.loss_ce: 0.2069, aux.acc_seg: 82.9536, loss: 0.4788
2023-02-13 14:39:50,847 - mmseg - INFO - Iter [11550/15000]	lr: 2.738e-03, eta: 0:57:05, time: 0.916, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2938, decode.acc_seg: 89.9104, aux.loss_ce: 0.2269, aux.acc_seg: 82.2967, loss: 0.5207
2023-02-13 14:40:36,588 - mmseg - INFO - Iter [11600/15000]	lr: 2.704e-03, eta: 0:56:14, time: 0.915, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2644, decode.acc_seg: 90.7000, aux.loss_ce: 0.2133, aux.acc_seg: 83.1649, loss: 0.4776
2023-02-13 14:41:22,345 - mmseg - INFO - Iter [11650/15000]	lr: 2.669e-03, eta: 0:55:24, time: 0.915, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2992, decode.acc_seg: 89.2955, aux.loss_ce: 0.2172, aux.acc_seg: 82.4290, loss: 0.5164
2023-02-13 14:42:08,037 - mmseg - INFO - Iter [11700/15000]	lr: 2.635e-03, eta: 0:54:33, time: 0.914, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3038, decode.acc_seg: 89.0331, aux.loss_ce: 0.2178, aux.acc_seg: 82.3022, loss: 0.5216
2023-02-13 14:42:53,748 - mmseg - INFO - Iter [11750/15000]	lr: 2.600e-03, eta: 0:53:42, time: 0.914, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3073, decode.acc_seg: 90.0520, aux.loss_ce: 0.2164, aux.acc_seg: 82.6427, loss: 0.5237
2023-02-13 14:43:39,436 - mmseg - INFO - Iter [11800/15000]	lr: 2.566e-03, eta: 0:52:52, time: 0.914, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3079, decode.acc_seg: 89.0450, aux.loss_ce: 0.2193, aux.acc_seg: 82.0142, loss: 0.5273
2023-02-13 14:44:25,196 - mmseg - INFO - Iter [11850/15000]	lr: 2.531e-03, eta: 0:52:01, time: 0.915, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2904, decode.acc_seg: 89.6096, aux.loss_ce: 0.2176, aux.acc_seg: 82.2555, loss: 0.5080
2023-02-13 14:45:13,005 - mmseg - INFO - Iter [11900/15000]	lr: 2.496e-03, eta: 0:51:11, time: 0.956, data_time: 0.054, memory: 21690, decode.loss_ce: 0.2805, decode.acc_seg: 89.8999, aux.loss_ce: 0.1997, aux.acc_seg: 83.7606, loss: 0.4802
2023-02-13 14:45:58,498 - mmseg - INFO - Iter [11950/15000]	lr: 2.461e-03, eta: 0:50:21, time: 0.910, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2581, decode.acc_seg: 90.6759, aux.loss_ce: 0.1989, aux.acc_seg: 83.8268, loss: 0.4570
2023-02-13 14:46:44,103 - mmseg - INFO - Saving checkpoint at 12000 iterations
2023-02-13 14:46:45,403 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 14:46:45,403 - mmseg - INFO - Iter [12000/15000]	lr: 2.426e-03, eta: 0:49:30, time: 0.938, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3195, decode.acc_seg: 88.9508, aux.loss_ce: 0.2286, aux.acc_seg: 81.9409, loss: 0.5481
2023-02-13 14:48:26,215 - mmseg - INFO - per class results:
2023-02-13 14:48:26,218 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 89.81 | 92.64 |
|  aeroplane  | 83.23 | 95.21 |
|   bicycle   | 34.46 | 91.09 |
|     bird    | 81.29 | 92.61 |
|     boat    | 71.31 | 89.01 |
|    bottle   | 60.47 | 89.82 |
|     bus     | 73.03 | 74.01 |
|     car     | 71.49 | 90.38 |
|     cat     | 83.74 |  90.8 |
|    chair    | 25.49 | 49.86 |
|     cow     | 76.01 | 82.44 |
| diningtable | 39.85 | 43.47 |
|     dog     | 74.09 | 88.73 |
|    horse    | 73.54 | 88.58 |
|  motorbike  | 73.94 | 91.79 |
|    person   | 77.62 | 91.15 |
| pottedplant | 34.81 | 71.07 |
|    sheep    | 65.23 | 89.16 |
|     sofa    | 39.68 | 47.06 |
|    train    | 70.04 |  96.5 |
|  tvmonitor  |  38.1 | 93.37 |
+-------------+-------+-------+
2023-02-13 14:48:26,218 - mmseg - INFO - Summary:
2023-02-13 14:48:26,218 - mmseg - INFO - 
+-------+-------+------+
|  aAcc |  mIoU | mAcc |
+-------+-------+------+
| 90.21 | 63.68 | 82.8 |
+-------+-------+------+
2023-02-13 14:48:26,218 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 14:48:26,219 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.9021, mIoU: 0.6368, mAcc: 0.8280, IoU.background: 0.8981, IoU.aeroplane: 0.8323, IoU.bicycle: 0.3446, IoU.bird: 0.8129, IoU.boat: 0.7131, IoU.bottle: 0.6047, IoU.bus: 0.7303, IoU.car: 0.7149, IoU.cat: 0.8374, IoU.chair: 0.2549, IoU.cow: 0.7601, IoU.diningtable: 0.3985, IoU.dog: 0.7409, IoU.horse: 0.7354, IoU.motorbike: 0.7394, IoU.person: 0.7762, IoU.pottedplant: 0.3481, IoU.sheep: 0.6523, IoU.sofa: 0.3968, IoU.train: 0.7004, IoU.tvmonitor: 0.3810, Acc.background: 0.9264, Acc.aeroplane: 0.9521, Acc.bicycle: 0.9109, Acc.bird: 0.9261, Acc.boat: 0.8901, Acc.bottle: 0.8982, Acc.bus: 0.7401, Acc.car: 0.9038, Acc.cat: 0.9080, Acc.chair: 0.4986, Acc.cow: 0.8244, Acc.diningtable: 0.4347, Acc.dog: 0.8873, Acc.horse: 0.8858, Acc.motorbike: 0.9179, Acc.person: 0.9115, Acc.pottedplant: 0.7107, Acc.sheep: 0.8916, Acc.sofa: 0.4706, Acc.train: 0.9650, Acc.tvmonitor: 0.9337
2023-02-13 14:49:11,689 - mmseg - INFO - Iter [12050/15000]	lr: 2.392e-03, eta: 0:49:04, time: 2.926, data_time: 2.024, memory: 21690, decode.loss_ce: 0.2489, decode.acc_seg: 90.7943, aux.loss_ce: 0.2075, aux.acc_seg: 83.2162, loss: 0.4564
2023-02-13 14:49:57,344 - mmseg - INFO - Iter [12100/15000]	lr: 2.357e-03, eta: 0:48:14, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2396, decode.acc_seg: 91.6071, aux.loss_ce: 0.1903, aux.acc_seg: 84.8594, loss: 0.4299
2023-02-13 14:50:43,022 - mmseg - INFO - Iter [12150/15000]	lr: 2.322e-03, eta: 0:47:23, time: 0.914, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2608, decode.acc_seg: 90.5237, aux.loss_ce: 0.2044, aux.acc_seg: 83.1824, loss: 0.4652
2023-02-13 14:51:28,619 - mmseg - INFO - Iter [12200/15000]	lr: 2.286e-03, eta: 0:46:32, time: 0.912, data_time: 0.009, memory: 21690, decode.loss_ce: 0.2501, decode.acc_seg: 90.9577, aux.loss_ce: 0.1974, aux.acc_seg: 83.7377, loss: 0.4475
2023-02-13 14:52:14,233 - mmseg - INFO - Iter [12250/15000]	lr: 2.251e-03, eta: 0:45:41, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2634, decode.acc_seg: 90.5022, aux.loss_ce: 0.2005, aux.acc_seg: 83.2832, loss: 0.4639
2023-02-13 14:52:59,879 - mmseg - INFO - Iter [12300/15000]	lr: 2.216e-03, eta: 0:44:50, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2386, decode.acc_seg: 91.4146, aux.loss_ce: 0.1957, aux.acc_seg: 83.8281, loss: 0.4343
2023-02-13 14:53:45,567 - mmseg - INFO - Iter [12350/15000]	lr: 2.181e-03, eta: 0:44:00, time: 0.914, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2585, decode.acc_seg: 90.8641, aux.loss_ce: 0.2014, aux.acc_seg: 83.4794, loss: 0.4598
2023-02-13 14:54:31,211 - mmseg - INFO - Iter [12400/15000]	lr: 2.145e-03, eta: 0:43:09, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2835, decode.acc_seg: 89.7001, aux.loss_ce: 0.2028, aux.acc_seg: 83.1696, loss: 0.4863
2023-02-13 14:55:16,869 - mmseg - INFO - Iter [12450/15000]	lr: 2.110e-03, eta: 0:42:18, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2745, decode.acc_seg: 90.4399, aux.loss_ce: 0.2016, aux.acc_seg: 83.2602, loss: 0.4761
2023-02-13 14:56:02,442 - mmseg - INFO - Iter [12500/15000]	lr: 2.074e-03, eta: 0:41:28, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2546, decode.acc_seg: 90.8692, aux.loss_ce: 0.2089, aux.acc_seg: 82.7051, loss: 0.4635
2023-02-13 14:56:48,054 - mmseg - INFO - Iter [12550/15000]	lr: 2.039e-03, eta: 0:40:37, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2435, decode.acc_seg: 91.3884, aux.loss_ce: 0.1833, aux.acc_seg: 85.3487, loss: 0.4268
2023-02-13 14:57:33,690 - mmseg - INFO - Iter [12600/15000]	lr: 2.003e-03, eta: 0:39:46, time: 0.913, data_time: 0.009, memory: 21690, decode.loss_ce: 0.2495, decode.acc_seg: 91.0809, aux.loss_ce: 0.1999, aux.acc_seg: 83.2031, loss: 0.4494
2023-02-13 14:58:19,239 - mmseg - INFO - Iter [12650/15000]	lr: 1.968e-03, eta: 0:38:56, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2690, decode.acc_seg: 90.6989, aux.loss_ce: 0.2123, aux.acc_seg: 83.1034, loss: 0.4812
2023-02-13 14:59:04,858 - mmseg - INFO - Iter [12700/15000]	lr: 1.932e-03, eta: 0:38:06, time: 0.912, data_time: 0.009, memory: 21690, decode.loss_ce: 0.2648, decode.acc_seg: 90.2595, aux.loss_ce: 0.1995, aux.acc_seg: 83.0542, loss: 0.4643
2023-02-13 14:59:50,380 - mmseg - INFO - Iter [12750/15000]	lr: 1.896e-03, eta: 0:37:15, time: 0.910, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2563, decode.acc_seg: 90.7610, aux.loss_ce: 0.1934, aux.acc_seg: 84.2463, loss: 0.4497
2023-02-13 15:00:35,963 - mmseg - INFO - Iter [12800/15000]	lr: 1.860e-03, eta: 0:36:25, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2252, decode.acc_seg: 91.5197, aux.loss_ce: 0.1814, aux.acc_seg: 84.6031, loss: 0.4065
2023-02-13 15:01:21,520 - mmseg - INFO - Iter [12850/15000]	lr: 1.824e-03, eta: 0:35:34, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2555, decode.acc_seg: 91.0670, aux.loss_ce: 0.1939, aux.acc_seg: 84.3340, loss: 0.4493
2023-02-13 15:02:07,160 - mmseg - INFO - Iter [12900/15000]	lr: 1.788e-03, eta: 0:34:44, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2230, decode.acc_seg: 91.6138, aux.loss_ce: 0.1838, aux.acc_seg: 84.6224, loss: 0.4068
2023-02-13 15:02:52,697 - mmseg - INFO - Iter [12950/15000]	lr: 1.752e-03, eta: 0:33:54, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2732, decode.acc_seg: 90.4937, aux.loss_ce: 0.2044, aux.acc_seg: 84.0592, loss: 0.4776
2023-02-13 15:03:38,211 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 15:03:38,211 - mmseg - INFO - Iter [13000/15000]	lr: 1.715e-03, eta: 0:33:04, time: 0.910, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2466, decode.acc_seg: 91.0533, aux.loss_ce: 0.1738, aux.acc_seg: 85.0356, loss: 0.4204
2023-02-13 15:04:23,775 - mmseg - INFO - Iter [13050/15000]	lr: 1.679e-03, eta: 0:32:13, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2606, decode.acc_seg: 90.2764, aux.loss_ce: 0.1979, aux.acc_seg: 84.5842, loss: 0.4584
2023-02-13 15:05:09,252 - mmseg - INFO - Iter [13100/15000]	lr: 1.643e-03, eta: 0:31:23, time: 0.910, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2569, decode.acc_seg: 90.1980, aux.loss_ce: 0.1992, aux.acc_seg: 83.3654, loss: 0.4560
2023-02-13 15:05:54,817 - mmseg - INFO - Iter [13150/15000]	lr: 1.606e-03, eta: 0:30:33, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2698, decode.acc_seg: 90.4270, aux.loss_ce: 0.2033, aux.acc_seg: 83.5123, loss: 0.4731
2023-02-13 15:06:40,345 - mmseg - INFO - Iter [13200/15000]	lr: 1.569e-03, eta: 0:29:43, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2813, decode.acc_seg: 89.9165, aux.loss_ce: 0.2105, aux.acc_seg: 82.9657, loss: 0.4917
2023-02-13 15:07:27,992 - mmseg - INFO - Iter [13250/15000]	lr: 1.533e-03, eta: 0:28:53, time: 0.953, data_time: 0.054, memory: 21690, decode.loss_ce: 0.2348, decode.acc_seg: 90.9860, aux.loss_ce: 0.1836, aux.acc_seg: 84.5678, loss: 0.4184
2023-02-13 15:08:13,396 - mmseg - INFO - Iter [13300/15000]	lr: 1.496e-03, eta: 0:28:03, time: 0.908, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2275, decode.acc_seg: 91.4887, aux.loss_ce: 0.1750, aux.acc_seg: 85.3269, loss: 0.4025
2023-02-13 15:08:58,968 - mmseg - INFO - Iter [13350/15000]	lr: 1.459e-03, eta: 0:27:13, time: 0.911, data_time: 0.009, memory: 21690, decode.loss_ce: 0.2371, decode.acc_seg: 91.4531, aux.loss_ce: 0.1971, aux.acc_seg: 83.9614, loss: 0.4342
2023-02-13 15:09:44,505 - mmseg - INFO - Iter [13400/15000]	lr: 1.422e-03, eta: 0:26:23, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2297, decode.acc_seg: 91.4379, aux.loss_ce: 0.1803, aux.acc_seg: 84.9626, loss: 0.4100
2023-02-13 15:10:30,095 - mmseg - INFO - Iter [13450/15000]	lr: 1.384e-03, eta: 0:25:33, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2184, decode.acc_seg: 91.7685, aux.loss_ce: 0.1823, aux.acc_seg: 84.9467, loss: 0.4007
2023-02-13 15:11:15,645 - mmseg - INFO - Iter [13500/15000]	lr: 1.347e-03, eta: 0:24:43, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2020, decode.acc_seg: 92.4965, aux.loss_ce: 0.1703, aux.acc_seg: 86.2360, loss: 0.3723
2023-02-13 15:12:01,180 - mmseg - INFO - Iter [13550/15000]	lr: 1.310e-03, eta: 0:23:53, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2461, decode.acc_seg: 91.2168, aux.loss_ce: 0.1892, aux.acc_seg: 84.4379, loss: 0.4353
2023-02-13 15:12:46,721 - mmseg - INFO - Iter [13600/15000]	lr: 1.272e-03, eta: 0:23:04, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2227, decode.acc_seg: 91.9768, aux.loss_ce: 0.1877, aux.acc_seg: 84.5466, loss: 0.4104
2023-02-13 15:13:32,281 - mmseg - INFO - Iter [13650/15000]	lr: 1.234e-03, eta: 0:22:14, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2167, decode.acc_seg: 92.3506, aux.loss_ce: 0.1730, aux.acc_seg: 85.9679, loss: 0.3896
2023-02-13 15:14:17,816 - mmseg - INFO - Iter [13700/15000]	lr: 1.196e-03, eta: 0:21:24, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2058, decode.acc_seg: 92.0234, aux.loss_ce: 0.1730, aux.acc_seg: 85.6694, loss: 0.3789
2023-02-13 15:15:03,369 - mmseg - INFO - Iter [13750/15000]	lr: 1.158e-03, eta: 0:20:34, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2564, decode.acc_seg: 90.9216, aux.loss_ce: 0.1931, aux.acc_seg: 84.6306, loss: 0.4494
2023-02-13 15:15:48,959 - mmseg - INFO - Iter [13800/15000]	lr: 1.120e-03, eta: 0:19:44, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2215, decode.acc_seg: 91.8479, aux.loss_ce: 0.1878, aux.acc_seg: 84.8972, loss: 0.4093
2023-02-13 15:16:34,568 - mmseg - INFO - Iter [13850/15000]	lr: 1.082e-03, eta: 0:18:55, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2219, decode.acc_seg: 92.0294, aux.loss_ce: 0.1769, aux.acc_seg: 85.3826, loss: 0.3987
2023-02-13 15:17:20,179 - mmseg - INFO - Iter [13900/15000]	lr: 1.044e-03, eta: 0:18:05, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2348, decode.acc_seg: 91.2492, aux.loss_ce: 0.1771, aux.acc_seg: 85.0737, loss: 0.4119
2023-02-13 15:18:05,818 - mmseg - INFO - Iter [13950/15000]	lr: 1.005e-03, eta: 0:17:15, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2313, decode.acc_seg: 91.2177, aux.loss_ce: 0.1864, aux.acc_seg: 83.9667, loss: 0.4177
2023-02-13 15:18:51,407 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 15:18:51,407 - mmseg - INFO - Iter [14000/15000]	lr: 9.661e-04, eta: 0:16:26, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2216, decode.acc_seg: 91.5106, aux.loss_ce: 0.1783, aux.acc_seg: 85.0417, loss: 0.3999
2023-02-13 15:19:37,008 - mmseg - INFO - Iter [14050/15000]	lr: 9.270e-04, eta: 0:15:36, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2264, decode.acc_seg: 91.8678, aux.loss_ce: 0.1701, aux.acc_seg: 85.8252, loss: 0.3966
2023-02-13 15:20:22,628 - mmseg - INFO - Iter [14100/15000]	lr: 8.878e-04, eta: 0:14:47, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2457, decode.acc_seg: 91.0733, aux.loss_ce: 0.1973, aux.acc_seg: 84.0506, loss: 0.4431
2023-02-13 15:21:08,232 - mmseg - INFO - Iter [14150/15000]	lr: 8.483e-04, eta: 0:13:57, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2207, decode.acc_seg: 92.0729, aux.loss_ce: 0.1778, aux.acc_seg: 85.4914, loss: 0.3985
2023-02-13 15:21:53,885 - mmseg - INFO - Iter [14200/15000]	lr: 8.086e-04, eta: 0:13:08, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2354, decode.acc_seg: 91.4616, aux.loss_ce: 0.1840, aux.acc_seg: 85.0512, loss: 0.4194
2023-02-13 15:22:39,468 - mmseg - INFO - Iter [14250/15000]	lr: 7.687e-04, eta: 0:12:18, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2207, decode.acc_seg: 92.2255, aux.loss_ce: 0.1830, aux.acc_seg: 85.0605, loss: 0.4038
2023-02-13 15:23:25,042 - mmseg - INFO - Iter [14300/15000]	lr: 7.285e-04, eta: 0:11:29, time: 0.911, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2461, decode.acc_seg: 91.0453, aux.loss_ce: 0.1941, aux.acc_seg: 84.6618, loss: 0.4402
2023-02-13 15:24:10,676 - mmseg - INFO - Iter [14350/15000]	lr: 6.880e-04, eta: 0:10:39, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2333, decode.acc_seg: 91.1824, aux.loss_ce: 0.1835, aux.acc_seg: 84.7731, loss: 0.4168
2023-02-13 15:24:56,370 - mmseg - INFO - Iter [14400/15000]	lr: 6.472e-04, eta: 0:09:50, time: 0.914, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2173, decode.acc_seg: 91.9272, aux.loss_ce: 0.1729, aux.acc_seg: 85.3176, loss: 0.3902
2023-02-13 15:25:42,038 - mmseg - INFO - Iter [14450/15000]	lr: 6.060e-04, eta: 0:09:01, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2487, decode.acc_seg: 91.2518, aux.loss_ce: 0.1899, aux.acc_seg: 84.5514, loss: 0.4386
2023-02-13 15:26:27,657 - mmseg - INFO - Iter [14500/15000]	lr: 5.645e-04, eta: 0:08:11, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2269, decode.acc_seg: 91.9602, aux.loss_ce: 0.1810, aux.acc_seg: 84.9300, loss: 0.4080
2023-02-13 15:27:15,544 - mmseg - INFO - Iter [14550/15000]	lr: 5.226e-04, eta: 0:07:22, time: 0.958, data_time: 0.056, memory: 21690, decode.loss_ce: 0.2486, decode.acc_seg: 91.0246, aux.loss_ce: 0.1842, aux.acc_seg: 85.0095, loss: 0.4328
2023-02-13 15:28:01,062 - mmseg - INFO - Iter [14600/15000]	lr: 4.802e-04, eta: 0:06:33, time: 0.910, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2144, decode.acc_seg: 92.4062, aux.loss_ce: 0.1695, aux.acc_seg: 85.6479, loss: 0.3838
2023-02-13 15:28:46,664 - mmseg - INFO - Iter [14650/15000]	lr: 4.372e-04, eta: 0:05:44, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2171, decode.acc_seg: 92.0813, aux.loss_ce: 0.1709, aux.acc_seg: 86.0784, loss: 0.3880
2023-02-13 15:29:32,304 - mmseg - INFO - Iter [14700/15000]	lr: 3.937e-04, eta: 0:04:54, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2166, decode.acc_seg: 92.3549, aux.loss_ce: 0.1742, aux.acc_seg: 85.8502, loss: 0.3908
2023-02-13 15:30:17,905 - mmseg - INFO - Iter [14750/15000]	lr: 3.494e-04, eta: 0:04:05, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2248, decode.acc_seg: 92.1910, aux.loss_ce: 0.1709, aux.acc_seg: 86.4833, loss: 0.3957
2023-02-13 15:31:03,665 - mmseg - INFO - Iter [14800/15000]	lr: 3.042e-04, eta: 0:03:16, time: 0.915, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2034, decode.acc_seg: 92.2952, aux.loss_ce: 0.1586, aux.acc_seg: 87.0817, loss: 0.3621
2023-02-13 15:31:49,242 - mmseg - INFO - Iter [14850/15000]	lr: 2.578e-04, eta: 0:02:27, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2172, decode.acc_seg: 92.5094, aux.loss_ce: 0.1679, aux.acc_seg: 86.4443, loss: 0.3852
2023-02-13 15:32:34,836 - mmseg - INFO - Iter [14900/15000]	lr: 2.099e-04, eta: 0:01:38, time: 0.912, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2333, decode.acc_seg: 91.3083, aux.loss_ce: 0.1898, aux.acc_seg: 84.0111, loss: 0.4231
2023-02-13 15:33:20,503 - mmseg - INFO - Iter [14950/15000]	lr: 1.594e-04, eta: 0:00:49, time: 0.913, data_time: 0.008, memory: 21690, decode.loss_ce: 0.1691, decode.acc_seg: 93.6957, aux.loss_ce: 0.1520, aux.acc_seg: 87.2629, loss: 0.3211
2023-02-13 15:34:06,130 - mmseg - INFO - Saving checkpoint at 15000 iterations
2023-02-13 15:34:07,421 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 15:34:07,421 - mmseg - INFO - Iter [15000/15000]	lr: 1.017e-04, eta: 0:00:00, time: 0.938, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2103, decode.acc_seg: 92.3908, aux.loss_ce: 0.1785, aux.acc_seg: 85.5492, loss: 0.3888
2023-02-13 15:35:48,064 - mmseg - INFO - per class results:
2023-02-13 15:35:48,066 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 91.79 |  94.7 |
|  aeroplane  | 88.06 | 95.27 |
|   bicycle   |  37.3 | 87.81 |
|     bird    | 83.59 | 95.01 |
|     boat    | 70.58 | 88.35 |
|    bottle   | 65.04 | 94.15 |
|     bus     | 89.21 | 93.88 |
|     car     | 79.08 | 92.53 |
|     cat     |  88.7 |  97.0 |
|    chair    | 26.43 | 43.67 |
|     cow     |  81.2 | 87.46 |
| diningtable |  42.0 | 45.37 |
|     dog     | 80.54 |  92.5 |
|    horse    | 78.61 | 91.26 |
|  motorbike  |  79.4 |  91.8 |
|    person   |  81.1 | 91.59 |
| pottedplant | 45.88 | 70.97 |
|    sheep    | 78.57 |  89.8 |
|     sofa    |  44.4 | 52.95 |
|    train    | 84.99 | 93.97 |
|  tvmonitor  | 47.27 | 88.03 |
+-------------+-------+-------+
2023-02-13 15:35:48,066 - mmseg - INFO - Summary:
2023-02-13 15:35:48,066 - mmseg - INFO - 
+-------+------+-------+
|  aAcc | mIoU |  mAcc |
+-------+------+-------+
| 92.46 | 69.7 | 84.67 |
+-------+------+-------+
2023-02-13 15:35:48,067 - mmseg - INFO - Exp name: deeplab.voc2012.py
2023-02-13 15:35:48,067 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.9246, mIoU: 0.6970, mAcc: 0.8467, IoU.background: 0.9179, IoU.aeroplane: 0.8806, IoU.bicycle: 0.3730, IoU.bird: 0.8359, IoU.boat: 0.7058, IoU.bottle: 0.6504, IoU.bus: 0.8921, IoU.car: 0.7908, IoU.cat: 0.8870, IoU.chair: 0.2643, IoU.cow: 0.8120, IoU.diningtable: 0.4200, IoU.dog: 0.8054, IoU.horse: 0.7861, IoU.motorbike: 0.7940, IoU.person: 0.8110, IoU.pottedplant: 0.4588, IoU.sheep: 0.7857, IoU.sofa: 0.4440, IoU.train: 0.8499, IoU.tvmonitor: 0.4727, Acc.background: 0.9470, Acc.aeroplane: 0.9527, Acc.bicycle: 0.8781, Acc.bird: 0.9501, Acc.boat: 0.8835, Acc.bottle: 0.9415, Acc.bus: 0.9388, Acc.car: 0.9253, Acc.cat: 0.9700, Acc.chair: 0.4367, Acc.cow: 0.8746, Acc.diningtable: 0.4537, Acc.dog: 0.9250, Acc.horse: 0.9126, Acc.motorbike: 0.9180, Acc.person: 0.9159, Acc.pottedplant: 0.7097, Acc.sheep: 0.8980, Acc.sofa: 0.5295, Acc.train: 0.9397, Acc.tvmonitor: 0.8803
